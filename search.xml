<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>postgraduate</title>
      <link href="/postgraduate/"/>
      <url>/postgraduate/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>  其实说起来,考研这个事吧，一开始是不在整个规划之中的。但思来想去还是读一个研。<br>  　　为什么呢，还不是自己天天摆大烂，面试也没啥好东西可吹。<br>  　　考这个研，其实也是摆大烂，最后，哎，sb数学。为什么有这么阴间的概念题啊。<br>  　　暂且开这个文章，写写考研的时候的一些回忆。<br>  　　想起来多少就写多少。<br>  　　但毕竟我懒，再加上文学功底不行，估计最后也写不出什么东西来。<br>  　　哎，考研的时候就该每天去写写的。</p>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 回忆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>记，曾经的那段日子</title>
      <link href="/CnDota/"/>
      <url>/CnDota/</url>
      
        <content type="html"><![CDATA[<p>cndota，bestdota，已经记不清楚第一次遇见这句话是什么时候了。也记不清楚第一次遇见这句话的时候是什么感觉了。但，大概率是无感吧，毕竟当时应该就是个小屁孩，甚至还没有开始打Dota。但，现在来看，cndota，bestdota已经是一个过去了。</p><p>第一次看dota比赛应该是ti2吧，当时看游戏风云看见了ti1的navi。当时觉得这游戏好酷炫，于是ti2就开始在游戏风云追了起来，一路看到ig捧起冠军盾。后面慢慢的看游戏风云，看各种比赛。像什么ti，major，wcg啥的。</p><p>然后第一次自己上手dota2是在梦幻星空的机子上，笑死，鬼知道为什么当时死活注册不上但那天碰巧上去了。然后自己慢慢开始打dota，慢慢的接触这个游戏。当时也算有个人陪我吧，但他也不在了。其实算下来，自己打dota的时间不多，当个云玩家的时间倒是多得多，但就是对这个游戏有一种莫名的好感。从ti2的ig，ti4的vg还有ti6的护国神翼wings，中国队的比赛总是能带给我们各种各样的惊喜。可惜的是wings当时高中，属实是没机会看了。后来的ti8，ti9，ti10，怎么说呢，始终是带着那么一点遗憾。而国内也慢慢开始叫dead game，大家对待战队或者说选手的态度也不再是当时的那个样子了。</p><p>但，大家应该都在期望着那么一个战队能够打破所谓偶数年魔咒，能够再次捧起冠军盾，毕竟，比赛开始的时候大家还是都聚集到了直播间里。但今年的情况又不是那么的好。到目前为止，rng因病或者其他种种原因止步于此，lgd在败者组苦苦挣扎。胜者组就剩茶队，后面的每一场比赛都是生死战。虽然大家都笑着说dota是deadgame，但真的到这个时候又都显得那么的不舍。</p><p>rng，lgd，茶队，看着像这界ti还在打，但实际上里面的队员都打了多久了，但就是没有那么一个冠军盾。超哥，maybe，打了多少年了，拿了多少亚军，最后还是就这样了。xnova更是被迫一个人在主舞台上陪着四个熊打比赛，输了的那一刻，他在想啥呢？</p><p>每次说着要写很多东西，但实际开始写后，又发现什么也写不出来，毕竟我语文也就这水平，真要写也就这样。好多东西，感觉都积聚在心里，但就是表达不出来，哎，那些会写文章的人属实是厉害。</p><p>今年多少，21了，好像青春才刚刚开始，或许青春已经结束。算了。就这样了吧。</p><p>CnDota，BestDota！</p>]]></content>
      
      
      <categories>
          
          <category> 随笔 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dota2 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue</title>
      <link href="/vue/"/>
      <url>/vue/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自主学习 </tag>
            
            <tag> Vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea-插件</title>
      <link href="/idea-plugins/"/>
      <url>/idea-plugins/</url>
      
        <content type="html"><![CDATA[<h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><h3 id="mybatisx"><a href="#mybatisx" class="headerlink" title="mybatisx"></a>mybatisx</h3><h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><p>实现mapper文件和接口方法的快速跳转</p>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 自主学习 </tag>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>database</title>
      <link href="/database/"/>
      <url>/database/</url>
      
        <content type="html"><![CDATA[<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h3><h4 id="模糊查询"><a href="#模糊查询" class="headerlink" title="模糊查询"></a>模糊查询</h4><p>在使用like进行模糊查询时，参数需表示为%var%形式</p><hr><h3 id="键的约束"><a href="#键的约束" class="headerlink" title="键的约束"></a>键的约束</h3><h4 id="auto-increment"><a href="#auto-increment" class="headerlink" title="auto_increment"></a>auto_increment</h4><p>在 MySQL 中，当主键定义为自增长后，这个主键的值就不再需要用户输入数据了，而由数据库系统根据定义自动赋值。每增加一条记录，主键会自动以相同的步长进行增长。</p><p>默认情况下，AUTO_INCREMENT 的初始值是 1，每新增一条记录，字段值自动加 1。</p><p>一个表中只能有一个字段使用 AUTO_INCREMENT 约束，且该字段必须有唯一索引，以避免序号重复（即为主键或主键的一部分）。</p><p>AUTO_INCREMENT 约束的字段必须具备 NOT NULL 属性。</p><p>AUTO_INCREMENT 约束的字段只能是整数类型（TINYINT、SMALLINT、INT、BIGINT 等）。</p><p>AUTO_INCREMENT 约束字段的最大值受该字段的数据类型约束，如果达到上限，AUTO_INCREMENT 就会失效。</p><hr><h2 id="java代码"><a href="#java代码" class="headerlink" title="java代码"></a>java代码</h2><h3 id="驱动"><a href="#驱动" class="headerlink" title="驱动"></a>驱动</h3><p>部分教程代码中使用的驱动为</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.jdbc.Driver</span><br></pre></td></tr></table></figure><p>而现在应该使用的是</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">com.mysql.cj.jdbc.Driver</span><br></pre></td></tr></table></figure><hr><h3 id="sql片段"><a href="#sql片段" class="headerlink" title="sql片段"></a>sql片段</h3><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>减少大量重复代码使用</p><h4 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h4><p>见如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//id作为标识符，内部代码为需要替代的代码</span></span><br><span class="line">&lt;sql id=<span class="string">&quot;brand_column&quot;</span>&gt;</span><br><span class="line">        id,brand_name as brandname</span><br><span class="line">&lt;/sql&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在需要使用的位置写上如下代码，refid内为需要替换的代码块</span></span><br><span class="line">&lt;include refid=<span class="string">&quot;brand_column&quot;</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="resultMap"><a href="#resultMap" class="headerlink" title="resultMap"></a>resultMap</h3><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>解决部分名称不对应的问题</p><h4 id="使用方法-1"><a href="#使用方法-1" class="headerlink" title="使用方法"></a>使用方法</h4><p>见如下代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;resultMap id=<span class="string">&quot;brandResultMap&quot;</span> type=<span class="string">&quot;brand&quot;</span>&gt;</span><br><span class="line">    &lt;result column=<span class="string">&quot;brand_name&quot;</span> property=<span class="string">&quot;brandName&quot;</span>/&gt;</span><br><span class="line">&lt;/resultMap&gt;</span><br><span class="line"></span><br><span class="line">&lt;select id=<span class="string">&quot;selectAll&quot;</span> resultMap=<span class="string">&quot;brandResultMap&quot;</span>&gt;</span><br><span class="line">&lt;/select&gt;</span><br></pre></td></tr></table></figure><p>在sql语句上方加入resultmap标签。包含id(标识符)，type(类型)。内部使用result进行sql中一般字段方式的替换。column中填写数据库中对应字段名称，property中填写需要取值的实体类属性。</p><p>在sql语句标签中，将resultType改为resultmap，其中填写需要对应的id。然后可在执行语句时自动进行对应的替换。</p><p>若需要进行主键字段映射，则需使用id标签。</p>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MyBatis</title>
      <link href="/MyBatis/"/>
      <url>/MyBatis/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>原来跟着做博客的时候持久层就用的jpa，虽然后面那个铸币企业开发也得考jpa，但还是得学MyBatis，但好像这个也在被淘汰了，麻了。</p><hr><h2 id="开始"><a href="#开始" class="headerlink" title="开始"></a>开始</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>持久层框架，用于简化jdbc开发。</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">javaEE三层框架：表现层，业务层，持久层</span><br><span class="line">表现层：用于业务展示</span><br><span class="line">业务层：用于逻辑处理</span><br><span class="line">持久层：负责将数据保存到数据库的代码层 </span><br></pre></td></tr></table></figure><hr><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="项目添加"><a href="#项目添加" class="headerlink" title="项目添加"></a>项目添加</h3><p>先在xml文件中导入mybatis依赖，然后在resources中添加mybatis-config.xml文件以及mapper查询语句文件。对应内容上官网查询</p><hr><h3 id="mapper文件"><a href="#mapper文件" class="headerlink" title="mapper文件"></a>mapper文件</h3><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/9cbc13e7-0f6b-4b3d-8a89-15aabd1bdaf4.png" alt="mapper文件"></p><p>图中namespace为名称空间，可自定义，作用为区分不同空间中的操作id，类似于接口</p><p>下面每个标签为一个查询语句。id为语句唯一表示符，resultType为查询返回对象，中间部分为sql操作语句。</p><p>对应对象类应该放到pojo软件包中作为pojo类</p><hr><h3 id="主类中使用"><a href="#主类中使用" class="headerlink" title="主类中使用"></a>主类中使用</h3><p>使用时百度，不会有人能记住这些玩意吧</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1. 加载mybatis的核心配置文件，获取 SqlSessionFactory</span></span><br><span class="line"><span class="type">String</span> <span class="variable">resource</span> <span class="operator">=</span> <span class="string">&quot;mybatis-config.xml&quot;</span>;</span><br><span class="line"><span class="type">InputStream</span> <span class="variable">inputStream</span> <span class="operator">=</span> Resources.getResourceAsStream(resource);</span><br><span class="line"><span class="type">SqlSessionFactory</span> <span class="variable">sqlSessionFactory</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SqlSessionFactoryBuilder</span>().build(inputStream);</span><br><span class="line"></span><br><span class="line"><span class="comment">//2. 获取SqlSession对象，用它来执行sql</span></span><br><span class="line"><span class="type">SqlSession</span> <span class="variable">sqlSession</span> <span class="operator">=</span> sqlSessionFactory.openSession();</span><br><span class="line"></span><br><span class="line"><span class="comment">//3. 执行sql</span></span><br><span class="line">List&lt;User&gt; users = sqlSession.selectList(<span class="string">&quot;test.selectAll&quot;</span>);<span class="comment">//()内为sql语句标识，为空间加上id</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//4. 释放资源</span></span><br><span class="line">sqlSession.close();</span><br></pre></td></tr></table></figure><hr><h3 id="相关语法"><a href="#相关语法" class="headerlink" title="相关语法"></a>相关语法</h3><h4 id="参数占位符"><a href="#参数占位符" class="headerlink" title="参数占位符"></a>参数占位符</h4><p>在sql语句中使用#{var}表示传入变量，var依据方法内变量名填写，会将其其替换为？防止sql注入</p><p>用${}会拼接sql语句，存在sql注入问题</p><p>参数传递用#{}，动态查询时使用${}(相对较少)</p><p>在方法里若需要传入多个变量，需添加@Param注解表示对应变量；若属于一个对象可直接传入一个对象或者一个map。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;<span class="keyword">var</span>&gt; <span class="title function_">selectById</span><span class="params">(<span class="meta">@Param(&quot;id&quot;)</span><span class="type">int</span> id,<span class="meta">@Param(&quot;name&quot;)</span>String name)</span>;</span><br><span class="line"><span class="comment">//param()内文本为sql语句中对应参数名</span></span><br></pre></td></tr></table></figure><hr><h4 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h4><p>可使用parameterType确定，但可省略</p><hr><h4 id="特殊字符处理"><a href="#特殊字符处理" class="headerlink" title="特殊字符处理"></a>特殊字符处理</h4><p>例如“&lt;”等，可使用转义字符或者CDATA区</p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;![CDATA[文本]]&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="动态查询"><a href="#动态查询" class="headerlink" title="动态查询"></a>动态查询</h4><h5 id="if"><a href="#if" class="headerlink" title="if"></a>if</h5><p>作用为条件判断，test为固定表达</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">&quot;条件语句&quot;</span>&gt;</span><br><span class="line">  sql语句</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>若进行空字符串判断，不能使用.equals()方法,也不能使用&amp;&amp;连接</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;<span class="keyword">if</span> test=<span class="string">&quot;var ! = null and var != &#x27;&#x27; &quot;</span>&gt;</span><br><span class="line">  sql语句</span><br><span class="line">&lt;/<span class="keyword">if</span>&gt;</span><br></pre></td></tr></table></figure><p>可使用”&lt;where&gt;&lt;&#x2F;where&gt;”包裹所有条件并在if的sql语句中均加上and避免where后的and语法错误</p><hr><h5 id="choose-when-otherwide"><a href="#choose-when-otherwide" class="headerlink" title="choose(when,otherwide)"></a>choose(when,otherwide)</h5><p>作用为多个条件中选择查询,类似于switch语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;choose&gt;</span><br><span class="line">  &lt;when test=<span class="string">&quot;条件语句&quot;</span>&gt;</span><br><span class="line">    sql语句</span><br><span class="line">  &lt;/when&gt;</span><br><span class="line">  ···</span><br><span class="line">  &lt;otherwise&gt;</span><br><span class="line">    sql语句</span><br><span class="line">  &lt;/otherwise&gt;</span><br><span class="line">&lt;/choose&gt;</span><br></pre></td></tr></table></figure><hr><h2 id="Mapper代理开发"><a href="#Mapper代理开发" class="headerlink" title="Mapper代理开发"></a>Mapper代理开发</h2><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>1.定义与sql映射同名的Mapper接口，并且放在sql映射文件同一目录</p><p>但不能将mapper文件直接移出resource文件夹，会导致文件结构混乱。</p><p>解决方法：在resource文件夹内创建同样目录文件夹，但快捷创建时需要使用&#x2F;作为分隔符，否则起不到多级目录的效果。</p><p>2.设置namespace为Mapper接口的全限定名</p><p>3.在Mapper接口中定义方法，方法名为sql语句id，保持参数类型和返回类型一致(注意返回为单个对象还是list对象)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">UserMapper</span> <span class="variable">userMapper</span> <span class="operator">=</span> sqlSession.getMapper(UserMapper.class);</span><br><span class="line">List&lt;User&gt; users = userMapper.selectAll();</span><br></pre></td></tr></table></figure><p>4.编码：改变对应路径等(此时可直接使用包扫描方式)</p>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea-快捷键</title>
      <link href="/idea/"/>
      <url>/idea/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>快捷键是个好东西，得多学学。</p><hr><h2 id="快捷键"><a href="#快捷键" class="headerlink" title="快捷键"></a>快捷键</h2><h3 id="快捷展开"><a href="#快捷展开" class="headerlink" title="快捷展开"></a>快捷展开</h3><h4 id="main函数展开"><a href="#main函数展开" class="headerlink" title="main函数展开"></a>main函数展开</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psvm + tab</span><br></pre></td></tr></table></figure><h4 id="println输出"><a href="#println输出" class="headerlink" title="println输出"></a>println输出</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sout + tab</span><br></pre></td></tr></table></figure><hr><h3 id="快捷功能"><a href="#快捷功能" class="headerlink" title="快捷功能"></a>快捷功能</h3><h4 id="格式化"><a href="#格式化" class="headerlink" title="格式化"></a>格式化</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + alt + l</span><br></pre></td></tr></table></figure><hr><h4 id="依赖查询"><a href="#依赖查询" class="headerlink" title="依赖查询"></a>依赖查询</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt + insert (惠普🐖🖊电脑莫得insert，fn+e不好使)</span><br></pre></td></tr></table></figure><hr><h4 id="整列操作"><a href="#整列操作" class="headerlink" title="整列操作"></a>整列操作</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt + 鼠标左键(左键按住不放)</span><br></pre></td></tr></table></figure><hr><h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="数据提交"><a href="#数据提交" class="headerlink" title="数据提交"></a>数据提交</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ctrl + enter</span><br></pre></td></tr></table></figure><hr><h4 id="添加行"><a href="#添加行" class="headerlink" title="添加行"></a>添加行</h4><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alt + insert(sb惠普)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> idea </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven-初步</title>
      <link href="/maven_start/"/>
      <url>/maven_start/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>仔细算一下,开学到现在5个星期，不对，算上工训中心7个星期了。结果啥都没干，风暴倒是玩了不少(小公主真的好玩)。。。</p><p>摆不动了，再摆要寄了。</p><hr><h2 id="Maven-start"><a href="#Maven-start" class="headerlink" title="Maven-start"></a>Maven-start</h2><h3 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h3><p>提供标准化的项目结构，构建流程，依赖管理机制。</p><hr><h3 id="项目结构"><a href="#项目结构" class="headerlink" title="项目结构"></a>项目结构</h3><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/1400807a-a902-4804-8c9e-190552eb66e7.png" alt="项目结构图"></p><hr><h3 id="仓库"><a href="#仓库" class="headerlink" title="仓库"></a>仓库</h3><p>本地仓库 -&gt; 远程仓库 -&gt; 中央仓库</p><hr><h3 id="生命周期"><a href="#生命周期" class="headerlink" title="生命周期"></a>生命周期</h3><p>指一次构建过程经历了多少个事件</p><p>一共3套生命周期：</p><p>  -clean:清理工作</p><p>  -default：核心工作，比如编译，打包等</p><p>  -site: 产生报告，发布站点等</p><p>同一生命周期内，执行后续命令，前边的所有命令会自动执行</p><hr><h3 id="maven坐标"><a href="#maven坐标" class="headerlink" title="maven坐标"></a>maven坐标</h3><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/8d06819d-9ef2-49bd-925e-2419b1e0947c.png" alt="坐标参数解释"></p><p>依赖范围：指可使用范围</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/22672d19-9c7b-4f92-b0f6-8c67c8ebed42.png" alt="依赖范围"></p>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 框架 </tag>
            
            <tag> 自主学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件导论之结对编程</title>
      <link href="/intro-partner/"/>
      <url>/intro-partner/</url>
      
        <content type="html"><![CDATA[<h1 id="mvn-TestPaperGenerator"><a href="#mvn-TestPaperGenerator" class="headerlink" title="mvn-TestPaperGenerator"></a>mvn-TestPaperGenerator</h1><p>HNU结队编程</p><p> 先放一手仓库地址,<a href="https://github.com/KallenBlue/mvn-TestPaperGenerator">仓库在这儿</a></p><hr><p>本项目前后端分离，前端由我100%制作，后端由<a href="http://kallenblue.cn/">伦</a>100%制作</p><p>后端使用了javaweb框架，mybatis管理数据库，maven管理项目，并采用了MVC的管理模式，运行效果良好</p><p>前端技术为基本的html语言加上js代码；在网页设计时采用了semantic ui进行辅助设计，自然也加入jQuery框架。form表单提交由于接口方法和form表单的兼容问题，全部改为了click后调用js函数，使用ajax跳转。</p><h2 id="使用配置"><a href="#使用配置" class="headerlink" title="使用配置"></a>使用配置</h2><h3 id="1-tomcat"><a href="#1-tomcat" class="headerlink" title="1.tomcat"></a>1.tomcat</h3><p>项目使用的tomcat的版本为9.0.65，如果运行异常请检查tomcat版本</p><h3 id="2-mybatis-config-xml文件配置"><a href="#2-mybatis-config-xml文件配置" class="headerlink" title="2.mybatis-config.xml文件配置"></a>2.mybatis-config.xml文件配置</h3><p>文件路径为：src&#x2F;main&#x2F;resources&#x2F;mybatis-config.xml,配置为自己的数据库信息即可</p><p>本项目仅使用user table，ddl放在下面了</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="keyword">user</span></span><br><span class="line">(</span><br><span class="line">    account  <span class="type">varchar</span>(<span class="number">12</span>) <span class="keyword">not</span> <span class="keyword">null</span></span><br><span class="line">        <span class="keyword">primary</span> key,</span><br><span class="line">    password <span class="type">varchar</span>(<span class="number">15</span>) <span class="keyword">null</span>,</span><br><span class="line">    <span class="keyword">identity</span> <span class="type">varchar</span>(<span class="number">5</span>)  <span class="keyword">null</span></span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>需要先创建数据库才能正常运行</p><h3 id="3-建议"><a href="#3-建议" class="headerlink" title="3.建议"></a>3.建议</h3><p>建议使用idea运行此项目</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><p>好像其他没啥了，想到了再加</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>这个项目就和简介说的一样，是一个完全靠b站和百度完成的项目。在项目开始之前，甚至说做到了一半之后我才知道是要做javaweb(前端搞静态网页设计，完全没注意这个事)。然后就得去b站看教程，看怎么用tomcat，看怎么用ajax。</p><p>所幸这个项目还是不是很难，好好学学就行了。做到过程充满了快乐，比如学会新的form表单用法，学会新的js用法，学会新的网页跳转。每次学会新技术并且成功在项目里应用的时候整个人是真的开心。这也是我为什么选择了软件这个专业(虽然湖带的这个sb专业和我设想的软件不大一样)。</p><p>导论这门课后面就是团队项目了，得做一个健康码小程序，又是一个全新的领域(乐)。好好学吧！</p>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验报告 </tag>
            
            <tag> 软件导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>软件创新课程之个人项目</title>
      <link href="/intro-self/"/>
      <url>/intro-self/</url>
      
        <content type="html"><![CDATA[<h2 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h2><p>这算是软件创新这笨比课程的第一个项目,也算是我自己一个人用java写的第一个东西(?).虽然时间总计没写多久,但还是再次让我体会到编程这东西就是得一边做,一边学。</p><hr><h2 id="题目要求以及大致编写思路"><a href="#题目要求以及大致编写思路" class="headerlink" title="题目要求以及大致编写思路"></a>题目要求以及大致编写思路</h2><p>题目的目的是做一个覆盖小学,初中,高中的数学计算题出题器，并能够做到不重复和文件保存。具体要求在后面分析代码时给出。</p><p>实现起来也不是很难，先通过while循环进行不断检测输入，登录通过以后，再进行相关操作检测，然后跳转到对应操作语句。代码主体为一个main主类，然后写了4个函数接口：file，mysql，question和user。</p><hr><h2 id="逻辑流程"><a href="#逻辑流程" class="headerlink" title="逻辑流程"></a>逻辑流程</h2><h3 id="登录"><a href="#登录" class="headerlink" title="登录"></a>登录</h3><h4 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h4><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/4630870a-ecc5-4dc5-8d80-9364a8f35d90.png" alt="登录要求"></p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/ae4f1db7-42d9-418a-9ff3-4b1c162fa339.png" alt="用户表"></p><p>也就是实现一个不同用户登录，并识别出其不同身份</p><h4 id="具体代码及分析-user接口"><a href="#具体代码及分析-user接口" class="headerlink" title="具体代码及分析(user接口)"></a>具体代码及分析(user接口)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span>&#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">school</span> <span class="operator">=</span> -<span class="number">1</span>;<span class="comment">//学校状态变量,同时以-1标记为未登录状态</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//未退出程序时循环进行登录操作</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">            <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> sc.next(); <span class="comment">//输入用户名</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">pass</span> <span class="operator">=</span> sc.next(); <span class="comment">//输入密码</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(school==-<span class="number">1</span>) &#123;</span><br><span class="line">                school = user.login(name, pass);<span class="comment">//登录检测</span></span><br><span class="line"></span><br><span class="line">                    <span class="comment">//当输入正确后,school值更改为对应学校,并进入登录后操作</span></span><br><span class="line">                    <span class="keyword">if</span>(school!=-<span class="number">1</span>) &#123;</span><br><span class="line">                        question.promot_choose(school);</span><br><span class="line">                        school=user.loginned(school,name);</span><br><span class="line">                    &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">login</span><span class="params">(String user, String pass)</span> &#123;<span class="comment">//登录验证</span></span><br><span class="line"></span><br><span class="line">        String[] name=&#123;<span class="string">&quot;张三1&quot;</span>,<span class="string">&quot;张三2&quot;</span>,<span class="string">&quot;张三3&quot;</span>,<span class="string">&quot;李四1&quot;</span>,<span class="string">&quot;李四2&quot;</span>,<span class="string">&quot;李四3&quot;</span>,<span class="string">&quot;王五1&quot;</span>,<span class="string">&quot;王五2&quot;</span>,<span class="string">&quot;王五3&quot;</span>&#125;;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//循环遍历数组,查看是否输入正确</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;<span class="number">9</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(user.equals(name[i]) &amp;&amp; pass.equals(<span class="string">&quot;123&quot;</span>))&#123;</span><br><span class="line">                <span class="comment">//根据用户名在数组中对应位置判断对应学校,0为小学,1为初中,2为高中</span></span><br><span class="line">                <span class="keyword">return</span> i/<span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入正确的用户名、密码&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;<span class="comment">//如果未检测到对应账号，返回-1</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其实java嘛，应该以类&#x2F;对象为主体，但就这个题而言，我个人觉得好像没啥必要(?)，所以我全部都是用的接口实现方法,除主类外一个没有。</p><p>然后就登录而言，在主类里利用一个while循环实现重复的登录判定.利用一个school变量标记用户对应的学校(这些就应该搞个用户类)。然后通过user接口里的login方法，进行登录验证,并将获得的学校传给school，然后传入user接口的loginned方法进行登录后操作。</p><p>然后对于login方法，利用数组保存了9个用户名，并依据学校将其排序，小学为前三个，初中为中间三个，高中为后面三个。密码则都是123，就不需要另外储存。然后进行字符串匹配，未成功返回-1，说明登录失败，成功则返回用户名的数组对应位置以此标记用户对应学校。</p><hr><h3 id="登录后命令判断"><a href="#登录后命令判断" class="headerlink" title="登录后命令判断"></a>登录后命令判断</h3><h4 id="具体要求"><a href="#具体要求" class="headerlink" title="具体要求"></a>具体要求</h4><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/997054db-9255-4b8d-bc60-a8e3409b0bda.png" alt="登录后命令操作"></p><p>具体来说就是在登录后根据输入字符串实现对应操作。</p><h4 id="具体代码及分析-user接口-1"><a href="#具体代码及分析-user接口-1" class="headerlink" title="具体代码及分析(user接口)"></a>具体代码及分析(user接口)</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="title function_">loginned</span><span class="params">(<span class="type">int</span> school,String user)</span>&#123;</span><br><span class="line">    <span class="comment">//登录后，先创建用户对应table</span></span><br><span class="line">    mysql.create(user);</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">sc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="comment">//当未退出时循环输入</span></span><br><span class="line">    <span class="keyword">while</span>(school!=-<span class="number">1</span>) &#123;</span><br><span class="line">    question.promot_generete(school);<span class="comment">//生成题目前提示</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">execute</span> <span class="operator">=</span> sc.next(); <span class="comment">//输入操作字符串</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span>()&#123;</span><br><span class="line">      <span class="type">int</span> <span class="variable">num</span> <span class="operator">=</span> Integer.parseInt(execute);</span><br><span class="line">      <span class="keyword">if</span> (num &gt;= <span class="number">10</span> &amp;&amp; num &lt;= <span class="number">30</span>) &#123;question.generat()&#125;</span><br><span class="line">      <span class="keyword">else</span> <span class="keyword">if</span> (num == -<span class="number">1</span>) &#123;school = -<span class="number">1</span>;&#125; </span><br><span class="line">      <span class="keyword">else</span> &#123;System.out.println(<span class="string">&quot;题目数量超出范围,请重新输入&quot;</span>);&#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">catch</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(execute.length()&gt;=<span class="number">4</span>) &#123;</span><br><span class="line">        String inter=execute.substring(<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">        <span class="comment">//根据输入类型,进行对应转换,如果输入非法,则进行相关提示</span></span><br><span class="line">          <span class="keyword">if</span>(inter.equals(<span class="string">&quot;切换为&quot;</span>))&#123;</span><br><span class="line">            <span class="keyword">if</span> (execute.equals(<span class="string">&quot;切换为小学&quot;</span>)) &#123;school = <span class="number">0</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (execute.equals(<span class="string">&quot;切换为初中&quot;</span>)) &#123;school = <span class="number">1</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span> (execute.equals(<span class="string">&quot;切换为高中&quot;</span>)) &#123;school = <span class="number">2</span>;&#125;</span><br><span class="line">            <span class="keyword">else</span> System.out.println(<span class="string">&quot;请输入小学、初中和高中三个选项中的一个&quot;</span>);</span><br><span class="line">          &#125;<span class="keyword">else</span> &#123;···&#125;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;···&#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>成功登录后，就是对应操作。首先便是一个mysql的表单创建，然后输入对应操作语句。</p><p>首先利用try-catch语句分析该字符串是否能够转为int数。若能成功转换则说明是出题语句或者退出登录语句，然后判读其数值。</p><p>若为10-30，则通过question接口中的generate函数执行出题操作。</p><p>若为-1，则将school变量置为-1执行退出操作，其他的则输出提示语句提示输入数字偏离对应范围，需要重新输入。</p><p>若无法转换，此时转换函数就会报错，然后执行catch内语句。</p><p>先判断是否为转换语句，若是则根据对应改变更改school值即可，若不是，直接输出提示“输入非法”即可。</p><hr><h2 id="相关接口及函数"><a href="#相关接口及函数" class="headerlink" title="相关接口及函数"></a>相关接口及函数</h2><p>user接口里的函数基本在逻辑流程里解释过了，这里就主要解释mysql，file和question接口及其函数。</p><h3 id="mysql-create"><a href="#mysql-create" class="headerlink" title="mysql.create"></a>mysql.create</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">create</span><span class="params">(String user)</span>&#123;</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册数据库驱动  </span></span><br><span class="line">            <span class="comment">// 创建数据库连接对象</span></span><br><span class="line">            ······</span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">// 创建对应table,主键为question,确保题目不重复</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;create table &quot;</span> + user + <span class="string">&quot; ( question varchar(20) primary key )&quot;</span>;</span><br><span class="line">            statement.executeUpdate(sql);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 数据库释放资源</span></span><br><span class="line">           ···</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>本函数传入一个user字符串,然后根据此字符串创建对应名称的题目表，表的主键为题目，利用主键不可重复的规则,达到题目不重复的目的。</p><hr><h3 id="mysql-save"><a href="#mysql-save" class="headerlink" title="mysql.save"></a>mysql.save</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//题目的查重保存方法</span></span><br><span class="line">    <span class="comment">//在数据库中,每个用户存在自己的一张表,题目对应为question为该table主键,当每次执行insert操作时可自动执行查重功能</span></span><br><span class="line">    <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">save</span><span class="params">(String question, String user)</span>&#123;<span class="comment">//</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">boolean</span> flag=<span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">// 注册数据库驱动</span></span><br><span class="line">            <span class="comment">// 创建数据库连接对象</span></span><br><span class="line">            ···</span><br><span class="line"></span><br><span class="line">            statement = connection.createStatement();</span><br><span class="line">            <span class="comment">// 创建并执行相关的数据库插入语句,利用result获得插入结果</span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into &quot;</span>+ user+ <span class="string">&quot; value (\&quot;&quot;</span>+question+<span class="string">&quot;\&quot;)&quot;</span>;</span><br><span class="line">            <span class="type">int</span> <span class="variable">result</span> <span class="operator">=</span> statement.executeUpdate(sql);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//执行语句后若返回值大于0,说明成功插入,没有重复，则返回true;反正返回false</span></span><br><span class="line">            <span class="keyword">if</span> (result &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;题目未重复&quot;</span>);</span><br><span class="line">                flag=<span class="literal">true</span>;<span class="comment">//</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;题目已重复&quot;</span>);</span><br><span class="line">                flag=<span class="literal">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 数据库释放资源</span></span><br><span class="line">            ···</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flag;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>save函数主要目的为生成题目后将其保存到数据库中。函数需要传入两个字符串，一个是题目字符串，一个是用户名字符串。</p><p>当调用函数后，根据用户名将题目字符串插入到对应表，如果能够成功插入，则说明没有重复，statement.executeUpdate函数就会返回一个大于0的int值，表示受到影响的表内行数，此时就可以将flag置为true，save函数就返回true值，表示题目没有重复，成功保存到数据库中;反之函数就会返回0表示没有行受到影响也就是没有成功插入。此时将flag置为false，表示题目重复。</p><hr><h3 id="file-generate"><a href="#file-generate" class="headerlink" title="file.generate"></a>file.generate</h3><h4 id="题目要求-1"><a href="#题目要求-1" class="headerlink" title="题目要求"></a>题目要求</h4><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/11ad14e2-f8dc-4fff-9959-e13a8b0057cf.png" alt="文件生成要求"></p><h4 id="具体代码及分析"><a href="#具体代码及分析" class="headerlink" title="具体代码及分析"></a>具体代码及分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> File <span class="title function_">generate</span><span class="params">(String user)</span>&#123;</span><br><span class="line">        <span class="type">Date</span> <span class="variable">date</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Date</span>();</span><br><span class="line">        <span class="type">SimpleDateFormat</span> <span class="variable">formatter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleDateFormat</span>(<span class="string">&quot;yyyy-MM-dd-HH-mm-ss&quot;</span>);</span><br><span class="line">        String time=formatter.format(date);</span><br><span class="line">        System.out.println(time);<span class="comment">//获取当前时间</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//文件夹不存在时生成对应文件夹</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">Path</span> <span class="operator">=</span> <span class="string">&quot;···&quot;</span> + user;</span><br><span class="line">        <span class="type">File</span> <span class="variable">folder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(Path);</span><br><span class="line">        <span class="keyword">if</span> (!folder.exists())  folder.mkdirs();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//生成对应text文件</span></span><br><span class="line">        <span class="type">File</span> <span class="variable">x</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            x = <span class="keyword">new</span> <span class="title class_">File</span>(Path,time+<span class="string">&quot;.txt&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (x.createNewFile()) &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;文件已生成: &quot;</span> + x.getName());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//返回生成的文件</span></span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>generate函数目的为生成文件。需要传入一个用户名字符串，然后传回一个对应文件。</p><p>函数本体较为简单，通过formatter.format函数获得当前时间作为文件名，然后保存到对应的文件夹下。然后将生成的文件传传出去。</p><hr><h3 id="file-save"><a href="#file-save" class="headerlink" title="file.save"></a>file.save</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">save</span><span class="params">(Vector&lt;String&gt; v,File x)</span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">FileWriter</span> <span class="variable">myWriter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileWriter</span>(x);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//通过遍历将题目保存到试卷中</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=v.size();i++)&#123;</span><br><span class="line">                String num=<span class="string">&quot;&quot;</span>;</span><br><span class="line">                       num=num+i+<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">                myWriter.write(num+v.get(i-<span class="number">1</span>)+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">                myWriter.write(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            myWriter.close();</span><br><span class="line">            System.out.println(<span class="string">&quot;试卷已保存&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>save函数目的为将题目保存到对应文件内。需要传入一个保存题目的vector以及需要保存到的文件。</p><p>主体操作为通过一个for循环，将vector中的题目字符串保存到文件内。</p><hr><h3 id="question-promot"><a href="#question-promot" class="headerlink" title="question.promot"></a>question.promot</h3><p>question接口中有三个类似的promote函数，主要目的在于不同情况下的提示语句，比较简单就不再赘述。</p><hr><h3 id="question-generate"><a href="#question-generate" class="headerlink" title="question.generate"></a>question.generate</h3><h4 id="题目要求-2"><a href="#题目要求-2" class="headerlink" title="题目要求"></a>题目要求</h4><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/242d201c-4d72-4f00-b957-46913c076877.png" alt="题目生成要求"></p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/832151b7-e5d5-46a7-b4e6-459ec4bd4c74.png" alt="不同学校要求"></p><h4 id="具体代码及分析-1"><a href="#具体代码及分析-1" class="headerlink" title="具体代码及分析"></a>具体代码及分析</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">generate</span><span class="params">(<span class="type">int</span> n,<span class="type">int</span> school,String user)</span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>generate函数目的在于根据输入生成对应题目并利用函数保存到文件中。<br>需要传入题目数量n，学校类型school以及用户名user</p><p>函数内分为三个部分，一个if语句根据school生成三种类型题目，鉴于其基本相似，这里就拿高中题目部分函数进行解释。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">String []  primary=&#123;<span class="string">&quot;+&quot;</span>,<span class="string">&quot;-&quot;</span>,<span class="string">&quot;*&quot;</span>,<span class="string">&quot;/&quot;</span>&#125;;<span class="comment">//保存小学操作符号</span></span><br><span class="line">            <span class="keyword">while</span> (n!=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="type">StringBuffer</span> <span class="variable">s</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StringBuffer</span>();</span><br><span class="line">                String inter=<span class="string">&quot;&quot;</span>;<span class="comment">//题目临时保存变量</span></span><br><span class="line"></span><br><span class="line">                <span class="type">int</span> use=r.nextInt(<span class="number">6</span>);<span class="comment">//通过随机数生成操作数目</span></span><br><span class="line">                <span class="type">int</span> size=<span class="number">0</span>;<span class="comment">//随机生成括号包含操作数数量</span></span><br><span class="line">                <span class="type">int</span> before=<span class="number">0</span>;<span class="comment">//随机生成括号前方未包含操作数</span></span><br><span class="line">                <span class="keyword">if</span>(use&lt;<span class="number">2</span>) use=<span class="number">2</span>;<span class="comment">//避免出现无操作数的情况</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//使用随机数决定本题是否存在括号,当大于0且总操作数大于2时才添加括号</span></span><br><span class="line">                <span class="type">int</span> flag=r.nextInt(<span class="number">5</span>);</span><br><span class="line">                <span class="keyword">if</span>(flag&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">if</span>(use&gt;<span class="number">2</span>)&#123;</span><br><span class="line">                        size=r.nextInt(use-<span class="number">1</span>);</span><br><span class="line">                        <span class="keyword">if</span>(size&lt;<span class="number">2</span>) size=<span class="number">2</span>;</span><br><span class="line">                        before=r.nextInt(use-size);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span> flag=<span class="number">0</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span>(before==<span class="number">0</span>&amp;&amp;flag!=<span class="number">0</span>) s.append(<span class="string">&#x27;(&#x27;</span>);</span><br><span class="line"></span><br><span class="line">                <span class="comment">//生成题目主体</span></span><br><span class="line">                <span class="type">int</span> num=r.nextInt(<span class="number">99</span>)+<span class="number">1</span>;<span class="comment">//加1为确保不出现操作数为0的情况</span></span><br><span class="line">                s.append(num);<span class="comment">//生成初始操作数</span></span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=use;j++)&#123;<span class="comment">//进行随机出题</span></span><br><span class="line">                    <span class="type">int</span> use_index=r.nextInt(<span class="number">3</span>);</span><br><span class="line">                        s.append(primary[use_index]);<span class="comment">//生成操作符号</span></span><br><span class="line">                    <span class="keyword">if</span>(j-<span class="number">1</span>==before&amp;&amp;flag!=<span class="number">0</span>) s.append(<span class="string">&#x27;(&#x27;</span>);<span class="comment">//添加左括号</span></span><br><span class="line">                        num=r.nextInt(<span class="number">99</span>)+<span class="number">1</span>;<span class="comment">//加1为确保不出现操作数为0的情况</span></span><br><span class="line">                        s.append(num);<span class="comment">//生成操作数</span></span><br><span class="line">                    <span class="keyword">if</span>(j==(before+size)) s.append(<span class="string">&#x27;)&#x27;</span>);<span class="comment">//添加右括号</span></span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                s.append(<span class="string">&#x27;=&#x27;</span>);<span class="comment">//末尾添加等于</span></span><br><span class="line">                inter=s.toString();<span class="comment">//转换为String</span></span><br><span class="line"></span><br><span class="line">                <span class="comment">//查重并保存</span></span><br><span class="line">                <span class="comment">//当成功插入后,save函数返回true值,此时题目量n减1,成功出题</span></span><br><span class="line">                <span class="keyword">if</span>(mysql.save(inter,user)==<span class="literal">true</span>) &#123;</span><br><span class="line">                    n-=<span class="number">1</span>;</span><br><span class="line">                    v.add(inter);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> i=<span class="number">0</span>;i&lt;v.size();i++)&#123;<span class="comment">//输出</span></span><br><span class="line">                System.out.println(v.get(i));</span><br><span class="line">            &#125;</span><br><span class="line">            File x=file.generate(user);<span class="comment">//生成文件</span></span><br><span class="line">            file.save(v,x);<span class="comment">//文件保存</span></span><br></pre></td></tr></table></figure><p>小学部分先利用随机数生成题目需要的操作数以及操作符号和是否需要括号，然后根据括号位置决定是否先在题目字符串前方添加左括号，然后将第一个操作数添加到题目字符串左方。</p><p>然后进行将题目数量n是否为0作为判断条件的while循环，每次生成操作数以及操作符号添加到题目字符串末尾，并在添加操作数和操作符号之间时判断是否需要添加括号。</p><p>生成整个题目后，利用mysql.save函数判断是否重复题目，如果没有重复则n-1，继续；如果重复则n不变。</p><p>最后将题目通过file.save和file.generate函数保存到文件里。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> junior=r.nextInt(use)+<span class="number">1</span>;<span class="comment">//生成初中符号位置</span></span><br><span class="line">     <span class="keyword">if</span>(junior==<span class="number">1</span>) &#123;<span class="comment">//以奇偶决定，偶则在前方生成根号，奇则在后方生成平方</span></span><br><span class="line">          <span class="keyword">if</span>(junior/<span class="number">2</span>==<span class="number">0</span>) s.append(<span class="string">&#x27;√&#x27;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成题目主体</span></span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=use;j++)&#123;<span class="comment">//进行随机出题</span></span><br><span class="line">    <span class="keyword">if</span>(j==junior) &#123;<span class="comment">//添加平方</span></span><br><span class="line">          <span class="keyword">if</span>(junior/<span class="number">2</span>!=<span class="number">0</span>) s.append(<span class="string">&#x27;²&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">    <span class="keyword">if</span>(j==junior) &#123;<span class="comment">//添加开根</span></span><br><span class="line">          <span class="keyword">if</span>(junior/<span class="number">2</span>==<span class="number">0</span>) s.append(<span class="string">&#x27;√&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ···</span><br><span class="line">&#125;                </span><br></pre></td></tr></table></figure><p>初中部分增加要求为开根号和开方,先通过随机数决定符号位置，然后根据位置奇偶决定在操作数上添加开方或者开根。然后根据符号类型，判读添加在操作数前方或者后方。</p><hr><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//生成高中符号</span></span><br><span class="line">  <span class="type">int</span> senior=r.nextInt(use)+<span class="number">1</span>;<span class="comment">//生成高中符号位置</span></span><br><span class="line">  <span class="type">int</span> type=r.nextInt(<span class="number">3</span>);<span class="comment">//生成符号类型</span></span><br><span class="line">  String [] tri=&#123;<span class="string">&quot;sin&quot;</span>,<span class="string">&quot;cos&quot;</span>,<span class="string">&quot;tan&quot;</span>&#125;;</span><br><span class="line">  <span class="keyword">if</span>(senior==<span class="number">1</span>) &#123;</span><br><span class="line">      s.append(tri[type]);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">2</span>;j&lt;=use;j++)&#123;<span class="comment">//进行随机出题</span></span><br><span class="line">            ···</span><br><span class="line">  <span class="keyword">if</span> (j==senior) s.append(tri[type]);<span class="comment">//添加高中符号</span></span><br><span class="line">            ···</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>高中部分增加三角函数，和初中部分一样，通过随机函数生成符号位置，然后根据位置决定符号类型，然后在对应位置直接添加到操作数前方即可。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个个人项目其实也不是很难，麻烦在于好多东西自己都没有接触过，比如数据库连接，java文件生成之类的。但好在网上相关教程还是比较多的，学习学习也就会了。希望自己能够多多学习，早日走上程序猿的岗位，然后回家开摆。</p>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验报告 </tag>
            
            <tag> 软件导论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22年的暑假总结</title>
      <link href="/2022summer/"/>
      <url>/2022summer/</url>
      
        <content type="html"><![CDATA[<p>这是一个颓废的暑假。</p><p>从回到家开始，就天天摆大烂，什么也没做，什么也没学。中间有段时间好歹还是洗了一下碗，过了没多久就又摆大烂了。</p><p>回到学校，开了idea，乐，30天到期了。又耗了我几十分钟去把它整好。</p><p>唉，还得继续小学期啊。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小学期之keil的使用</title>
      <link href="/keil/"/>
      <url>/keil/</url>
      
        <content type="html"><![CDATA[<h2 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h2><p>首先，你得要有个keil。至于怎么来，emmmm,自己百度。安装同理。毕竟我已经安好了，这篇文章也是为了以后自己还会用，所以就不写安装过程了。(其实是太多了，懒得写)</p><hr><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><h3 id="打开软件"><a href="#打开软件" class="headerlink" title="打开软件"></a>打开软件</h3><p>emmmm，如题。</p><hr><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>在顶部导航栏点击“project”，然后点击new uVision project，点击后在文件框中填写你的工程名，名字可以是任意英文字符组成的（在此时你最好在你所希望存储该工程的地方新建一文件夹）。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/89676469-2e39-4e1e-a7b6-f095a03679f7.png"></p><hr><h3 id="选择芯片"><a href="#选择芯片" class="headerlink" title="选择芯片"></a>选择芯片</h3><p>输入工程名后会出现如下图所示的芯片选择对话框，选择你开发板上的型号即可（相信要看这张帖子的人是在学51单片机，此时只需选择Atmel,然后点击AT89c51即可。如下第二张图所示）。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/e884619a-e133-4e82-9176-830488b5aa25.png"></p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/88a85dd6-00a3-4d45-969f-ec4a7439db8b.png"></p><hr><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>接下来会出现如下图所示画面，是跳入C函数之前执行的一段汇编代码，不加就用默认的启动代码，加了你没修改这段代码，那还是相当于用默认的启动代码，这时加和没加都一样。</p><p>比如说，你想另外设置SP的值，不用默入的，就可以加入，然后修改SP。</p><p>反正这个启动代码不用改，加不加无所谓。</p><p>根据你项目的需求决定是否添加。</p><p>如果你采用汇编语言写程序，建议别添加，添了还得改模块名称，麻烦。</p><p>如果你采用C语言，添加了有好处，避免你忘记有些初始化工作</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/9683dc0d-6905-4f2c-a1dc-b7df925741dd.png"></p><hr><h3 id="文件创建及添加到工程项目"><a href="#文件创建及添加到工程项目" class="headerlink" title="文件创建及添加到工程项目"></a>文件创建及添加到工程项目</h3><p>接下来出现下面第一张图，先点击红色方框内新建文件，再点击蓝色方框内保存按钮。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/7e15b3ee-cc5a-4c9c-8fab-5a134a274142.png"></p><p>点击保存按钮后输入源文件名称加后缀名（如果你是用C语言编写程序后缀名为*.c;如果你是用汇编语言编写程序则后缀名为*.asm）并点击确认保存。</p><p>接下来的一步是将源文件加入到工程中，点击选中“源组1”（source group 1）并右击，再点击添加文件（Add files to）到源组1即可。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/7bbfc329-31ae-4001-b35a-0888f5a4825f.png"></p><hr><h3 id="文件编译及hex文件生成"><a href="#文件编译及hex文件生成" class="headerlink" title="文件编译及hex文件生成"></a>文件编译及hex文件生成</h3><p>首先点击下图中红色方框内按钮，如果文件编写无误，应出现二图中0error提示(应该不会有人去管waring吧)。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/d9cda20f-9beb-47bf-a4d4-62207938af58.png"></p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/db9854d3-f69c-4de9-b0e1-dd65d4dac47f.png"></p><p>然后右击target1，并点击图中选项</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/dc467dcb-8ee6-443d-ad8d-31f435e712db.png"></p><p>点击output,并勾选create hex file 选项，之后点击ok退出。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/c4058f1e-4cec-40b1-b696-883271cd8f6d.png"></p><p>现在再次点击左上的编译检查按钮，就可以看见创建了hex文件，这时去对应文件夹下就可以看见hex文件了。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/0d046535-0310-48d2-96ee-435f8091a194.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工训中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于485总线的评分系统</title>
      <link href="/485/"/>
      <url>/485/</url>
      
        <content type="html"><![CDATA[<h3 id="B级任务：双机评分"><a href="#B级任务：双机评分" class="headerlink" title="B级任务：双机评分"></a>B级任务：双机评分</h3><h3 id="一-任务要求"><a href="#一-任务要求" class="headerlink" title="一.任务要求"></a>一.任务要求</h3><p>使用两块STC板分别下载上一节所提供的.hex文件，搭建485双机通信电路，在Linux中编程实现打分程序代码。</p><hr><h3 id="二-任务步骤"><a href="#二-任务步骤" class="headerlink" title="二.任务步骤"></a>二.任务步骤</h3><p>1.阅读程序系统流程框图，明确双机通信的功能需求。</p><p>2.熟悉上一节中模拟MODBUS协议的数据包结构，相关功能码及附加数据定义协议中的检验字节，本打分系统采用累加和编码。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/50cf6717-a968-49ed-ad01-4989b6ba75f2.jpg" alt="功能码参考表"></p><p>3.回顾485总线数据收发实验，搭建双机通信电路。参考上一节内容确保STC从机编号和评分设定完成后，按下KEY2、KEY3按键标志，第1位和第8位LED灯被点亮。</p><p>4.PC端串口设置如下：</p><p>串口波特率：9600  数据位：8位   校验位：无  停止位：1</p><p>5.所编写的PC端程序应参考上一节中的通信协议完成一次完整的评分过程：</p><p>(1)需要包含串口的设置</p><p>(2)主节点发起从机检测过程：发送指定从机编号正常检测数据包，判断回应查询数据包是否符合上一节中的通信协议。</p><p>(3)主机获取从机评分过程：发送指定从机评分相关数据包，判断回应查询数据包是否符合上一节中的通信协议。</p><p>(4)主机发起结束评分的过程，若复位成功，STC从机上第1位和第8位LED灯会熄灭。</p><p>(5)展示串口相关信息，展示检测到的从机编号和从机的评分等。</p><h3 id="三-实验代码"><a href="#三-实验代码" class="headerlink" title="三.实验代码"></a>三.实验代码</h3><hr><p>1.相关调用函数主要为老师在端口实验中所给出的代码，这里就不做过多解释。</p><p>2.相关变量定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> func_code1 = <span class="number">0x03</span>; <span class="comment">//读下位机功能码</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> func_code2 = <span class="number">0x08</span>; <span class="comment">//检测功能码</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> func_code3 = <span class="number">0x10</span>; <span class="comment">//地址错误功能码</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> func_code4 = <span class="number">0x01</span>; <span class="comment">//复位功能码</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addition_code1 = <span class="number">0x6f</span>; <span class="comment">//错误码</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addition_code2 = <span class="number">0x5a</span>; <span class="comment">//包头</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addition_code3 = <span class="number">0x00</span>; <span class="comment">//广播地址</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addition_code4 = <span class="number">0x13</span>; <span class="comment">//自定义内容</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp[<span class="number">28</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//用于存放读取出来的数据的缓冲区</span></span><br><span class="line"><span class="type">int</span> rl;<span class="comment">//读取数据的长度（单位：字节）</span></span><br></pre></td></tr></table></figure><p>3.读入相关数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你的码：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%i&quot;</span>, &amp;tmp_wirte[i]);</span><br><span class="line">tmp_wirte[<span class="number">4</span>] += (<span class="type">int</span>)tmp_wirte[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第五位为：%02x\n&quot;</span>, tmp_wirte[<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.剩余部分为根据相关代码进行发送接收</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">write(fd, tmp_wirte, <span class="number">5</span>);</span><br><span class="line">bzero(tmp, <span class="keyword">sizeof</span>(tmp)); <span class="comment">//把tmp对应的内存块的前sizeof(tmp)个字节置零</span></span><br><span class="line">ComRead(tmp, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">2</span>] == <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主机检测从机是否正常相关数据包：\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, tmp[j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %02x&quot;</span>, tmp[j]);</span><br><span class="line"><span class="keyword">if</span> (tmp[j] != tmp_wirte[j])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">tmp_wirte[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">2</span>] == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主机获取从机评分相关数据包：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, tmp[j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %02x&quot;</span>, tmp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">2</span>] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此轮评分结束相关数据包&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">2</span>] == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(epid);</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure><hr><h3 id="四-实验过程"><a href="#四-实验过程" class="headerlink" title="四.实验过程"></a>四.实验过程</h3><p>1.将对应16进制文件下载到对应板子，并使用杜邦线将上位机与下位机相连</p><p>2.连接成功后，先使用串口助手尝试传输功能</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/b9addb16-5681-4eb7-b20d-18168e90425e.png" alt="传输界面"></p><p>3.然后将单片机连接到虚拟机上，运行对应函数，功能成功实现</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/702d399f-f9e7-485d-baa7-a9fa829145f6.png" alt="结果展示"></p><hr><h3 id="五-实验总结"><a href="#五-实验总结" class="headerlink" title="五.实验总结"></a>五.实验总结</h3><p>1.本次实验使用的代码语言为c语言，但由于我们对c语言的不熟悉给我们带来了很多的麻烦。例如16进制的输出需要使用02x占位；16进制数的累加需要直接相加而不能使用循环。这提醒我们要加强相关学习。</p><p>2.在数据传输时要传输多次才能成功接受一次，初步分析是杜邦线以及硬件间的连接不是特别紧密导致。</p><p>3.本次实验也提醒我们要多多尝试不同的方法，不能只盯着一个方法。</p>]]></content>
      
      
      <categories>
          
          <category> 工训中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇怪的图床增加了</title>
      <link href="/cloudsource/"/>
      <url>/cloudsource/</url>
      
        <content type="html"><![CDATA[<h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>笑死，还没用到半年就寄了，绷不住了</p><h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>本来我是准备找个oss的图床的，但，被推荐了微信小程序工具的云存储，一个10gb，账号可创建多个，还是免费的，突然感觉其他的图床不香了。</p><hr><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="账号创建"><a href="#账号创建" class="headerlink" title="账号创建"></a>账号创建</h3><blockquote><p><a href="https://unicloud.dcloud.net.cn/home">微信服务空间</a></p></blockquote><p>进入这个网页。然后进行相关注册和实名认证(需要身份证照片)。</p><h3 id="创建服务空间"><a href="#创建服务空间" class="headerlink" title="创建服务空间"></a>创建服务空间</h3><p>认证后，进入服务空间，点击右上角“创建服务空间按钮”，并按照对应规则创建并命名自己的云空间。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/fa0b2cc7-1fbd-4437-9380-f340ac5188d8.png"></p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/a4ece375-ada0-40cb-af1e-da842572e316.png"></p><blockquote><p>PS：阿里云的一个空间是10GB，腾讯云的一个空间是5GB。</p></blockquote><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><p>成功创建服务空间后，点击自己的云空间进入，点击右上角的“上传文件”</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/8965cb8d-7cfb-4465-a053-bcb9a0ea5867.png"></p><p>然后将文件上传</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/dcb98464-7361-4829-89bc-b9ac164df2e1.png"></p><p>上传之后，点击文件的详情就可以看到文件链接，然后就可以使用了。</p><p><img src="https://mp-6e30d940-8f76-44be-8b67-00a1335eb840.cdn.bspapp.com/cloudstorage/c3384e1c-7d7c-430a-bbeb-8f0ccc69320d.png"></p><hr><h2 id="一点小问题"><a href="#一点小问题" class="headerlink" title="一点小问题"></a>一点小问题</h2><h3 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h3><p>其实可以看到，在你引用图片的时候，网页链接和你的图片的名字是没有任何关系的，这就使得你在引用后如果不预览图片的话，直接看链接是不知道对应的图片是什么的。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这个空间和其他的云服务空间相比可以说是非常好的一个，免费，存储空间够大，对于我这种用量不够大个人用户可以说是完全满足需求了。并且这个空间是在国内的，访问速度也没有任何问题，非常丝滑。如果以后没有其他问题我应该会一直用这个当自己的云服务空间。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell lab</title>
      <link href="/shelllab/"/>
      <url>/shelllab/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计算机系统这学期一共有四个实验，其中的bomblab和buflab都特别有趣，让我学到了很多汇编相关的知识。至于第一次的datalab就，很怪。这次的shelllab也是让人摸不着头脑(结果就是得寻求高人的帮助)，但最后还是得做出来(不然实验验收就寄了)。这里就先传一手shelllab的报告，至于bomblab和buflab的就再等什么时候有空再弄了。</p><hr><h2 id="一．实验目的"><a href="#一．实验目的" class="headerlink" title="一．实验目的"></a>一．实验目的</h2><p>shell Lab的主要目的是为了让我们熟悉进程控制和信号。</p><h2 id="二．实验内容"><a href="#二．实验内容" class="headerlink" title="二．实验内容"></a>二．实验内容</h2><p>主要是对tsh.c中没有填写的函数进行填写，使得该shell能处理前后台运行程序、能够处理ctrl+z、ctrl+c等信号。需要实现的函数主要有以下七个：</p><p>eval: 主要功能是解析cmdline，并且运行.</p><p>builtin cmd: 辨识和解析出bulidin命令: quit, fg, bg, and jobs. </p><p>do bgfg: 实现bg和fg命令.</p><p>waitfg: 实现等待前台程序运行结束.</p><p>sigchld handler: 响应SIGCHLD.</p><p>sigint handler: 响应 SIGINT (ctrl-c) 信号.</p><p>sigtstp handler: 响应 SIGTSTP (ctrl-z) 信号.</p><hr><h2 id="三．实验过程"><a href="#三．实验过程" class="headerlink" title="三．实验过程"></a>三．实验过程</h2><h3 id="trace01-gt-正确终止EOF"><a href="#trace01-gt-正确终止EOF" class="headerlink" title="trace01 -&gt;  正确终止EOF"></a>trace01 -&gt;  正确终止EOF</h3><p>  直接运行就行了。</p><hr><h3 id="trace-02-03-gt-实现内置的quit"><a href="#trace-02-03-gt-实现内置的quit" class="headerlink" title="trace 02,03 -&gt;实现内置的quit"></a>trace 02,03 -&gt;实现内置的quit</h3><p>(1)首先观察trace02.txt文件，发现只有quit，WAIT两条命令。执行后可以发现无法正常终止，因为tsh的quit内置命令还未编写，所以不能正常退出。因此需要我们实现终止命令quit()。</p><p>(2)实现quit：</p><p>目的：补齐文件tsh.c中的函数eval()函数和函数builtin_cmd()与quit相关的部分。</p><p>实现思路：首先从命令中提取参数，然后判断是否为内置命令，如果为内置命令，则直接在当前进程执行即可；如果不是内置命令，则需要新建一个子进程，并利用 execve 来通过参数给出的路径寻找出可执行文件并在子进程中执行，如果找不到该可执行文件，则输出命令未找到，并结束子进程。</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">eval</span><span class="params">(<span class="type">char</span> *cmdline)</span> <span class="comment">//加载且执行命令</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *argv[MAXARGS];        <span class="comment">/* 参数列表execve() */</span></span><br><span class="line">    <span class="type">char</span> buf[MAXLINE];          <span class="comment">/* 保存修改的命令行 */</span></span><br><span class="line">    <span class="type">pid_t</span> pid;                  <span class="comment">/* 进程id*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf,cmdline);</span><br><span class="line">    parseline(buf,argv);        <span class="comment">/*提取argv8*/</span></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">0</span>] == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;                 <span class="comment">/* 忽略空命令 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!builtin_cmd(argv))&#123;</span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>)&#123;    <span class="comment">/* 子程序运行用户作业 */</span></span><br><span class="line">          <span class="keyword">if</span>(execve(arg[v0],argv,environ)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">              <span class="comment">//判断是否找得到对应可执行文件</span></span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;%s: 命令未找到.\n&quot;</span>,arg[<span class="number">0</span>]);</span><br><span class="line">              <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">              <span class="comment">//找不到就退出，并终止进程</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)然后是判断是否为内置命令的函数builtin_cmd()：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">builtin_cmd</span><span class="params">(<span class="type">char</span> **argv)</span> <span class="comment">//判断当前命令是否为内置命令</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;quit&quot;</span>)) <span class="comment">//如果是内置命令quit</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);               <span class="comment">//就结束当前进程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">/* 不是一个内置命令 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，因为tset03功能是运行一个前台job，并且也是以quit终止，因此也同时完成了。</p><hr><h3 id="trace04-–-gt-实现eval-的后台作业（BK-job）管理功能"><a href="#trace04-–-gt-实现eval-的后台作业（BK-job）管理功能" class="headerlink" title="trace04 –&gt;实现eval()的后台作业（BK job）管理功能"></a>trace04 –&gt;实现eval()的后台作业（BK job）管理功能</h3><p>（1）思路：</p><p>·在原有的eval函数基础之上添加将作业添加至后台作业管理的函数使用（addjobs（））。</p><p>·加以信号的阻塞和取消阻塞。</p><p>（2）具体实现：</p><p>1.首先使用一个标记符号 –&gt; bg</p><p>2.因为要分析传入指令是否要在后台执行进程，因此要补充分析命令的函数builtin_cmd()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;&amp;&quot;</span>)) <span class="comment">/* 忽略单&amp; */</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//然后返回1，因为如果一个命令以&amp;结尾，shell应该在后台运行它，否则在前台运行；</span></span><br></pre></td></tr></table></figure><p>3.接着在eval中进行判断是否为后台进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 父任务等待前台任务结束 */</span></span><br><span class="line">        <span class="keyword">if</span> (!bg)&#123; <span class="comment">//如果不是后台进程，就等待当前的前台进程</span></span><br><span class="line">            waitfg(pid);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  <span class="comment">/* 否则就是后台进程，开始在后台工作 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,pid2jid(pid),pid,cmdline);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>4.再将waitfg()函数补充完整,让父进程正确地等待。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">waitfg</span><span class="params">(<span class="type">pid_t</span> pid)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">/* 唯一的前台作业结束后，被sigchld_handler回收，deletejob()后，jobs列表中就没有前台作业了，</span></span><br><span class="line"><span class="comment">        循环fpgid(..)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span>(pid==fgpid(jobs))&#123;</span><br><span class="line">        sleep(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.接下来实现信号的控制，这里使用sigprocmask()函数显式地阻塞和取消阻塞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!builtin_cmd(argv))&#123;</span><br><span class="line">        sigfillset(&amp;mask_all);  <span class="comment">/* 保存当前的阻塞信号集合(blocked位向量) */</span></span><br><span class="line">        sigemptyset(&amp;mask_one); <span class="comment">//初始化mask_one为空集</span></span><br><span class="line">        sigaddset(&amp;mask_one,SIGCHLD);<span class="comment">//添加SIGCHLD到mask_one中</span></span><br><span class="line">        <span class="comment">//以上三句保存了当前的已阻塞信号集合</span></span><br><span class="line"> </span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_one,&amp;prev_one);         <span class="comment">/* 添加mask_one中的信号到信号集合（blocked位向量），从而父进程保持SIGCHLD的阻塞*/</span></span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>)&#123;    <span class="comment">/* 子程序运行用户作业 */</span></span><br><span class="line"> </span><br><span class="line">            sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="literal">NULL</span>); <span class="comment">/* 因为子进程继承了它们父进程的被阻塞集合，所以在调用execve之前，必须解除子进程对SIGCHLD的阻塞，避免子进程fork出来的进程无法被回收*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">       <span class="keyword">if</span>(setpgid(<span class="number">0</span>,<span class="number">0</span>) &lt; <span class="number">0</span>)&#123;               </span><br><span class="line"><span class="comment">/* 把子进程放到一个新进程组中，该进程组ID与子进程的PID相同。这将确保前台进程组中只有一个进程，即shell进程。*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setpgid error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="keyword">if</span>(execve(argv[<span class="number">0</span>],argv,environ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="comment">//第一个错误处理，直接在这里进行提示信息输出</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_all,<span class="literal">NULL</span>);   <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">        addjob(jobs,pid,bg==<span class="number">1</span> ? BG : FG,cmdline); <span class="comment">/* 将子任务添加到任务列表中 */</span></span><br><span class="line">        sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="literal">NULL</span>);  <span class="comment">/* 解除子进程对SIGCHLD的阻塞 */</span></span><br><span class="line">        <span class="comment">/* 这样子sigchld_handler处理程序在我们将其添加到工作队列</span></span><br><span class="line"><span class="comment">            中之前是不会运行的。因为直到addjob()之后，我们才解除对SIGCHLD的阻塞</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure><p>6.接下来实现对应的sigcld_handler()以释放僵尸的子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * sigchld_handler - 每当子作业终止(变成僵尸)，或者因为收到SIGSTOP或SIGTSTP信号而停止时，</span></span><br><span class="line"><span class="comment"> * 内核就向shell发送SIGCHLD。该处理程序获取所有可用的僵尸子进程，</span></span><br><span class="line"><span class="comment"> * 但不等待任何其他当前运行的子进程终止。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> olderrno = errno;</span><br><span class="line">    <span class="type">sigset_t</span> mask_all,prev_all;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line"> </span><br><span class="line">    sigfillset(&amp;mask_all);         <span class="comment">/* 保存当前的信号集合(blocked位向量) */</span></span><br><span class="line">    <span class="keyword">while</span>((pid = waitpid(<span class="number">-1</span>,<span class="literal">NULL</span>,WNOHANG)) &gt; <span class="number">0</span>)&#123;    </span><br><span class="line">      sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all); <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">      deletejob(jobs,pid);    /释放僵尸进程/</span><br><span class="line">      sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="literal">NULL</span>); <span class="comment">//解除阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line">    errno = olderrno;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.综上，我们的addjobs就成功实现了！</p><hr><h3 id="trace05-–-gt-处理jobs内置命令"><a href="#trace05-–-gt-处理jobs内置命令" class="headerlink" title="trace05 –&gt;处理jobs内置命令"></a>trace05 –&gt;处理jobs内置命令</h3><p>(1)思路：直接调用自带的listjobs()方法，就是在原有builtin_cmd函数中添加一个判断函数，如果参数是jobs，则执行listjobs函数的功能（即将所有的作业打印出来）。</p><p>(2)实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;jobs&quot;</span>))&#123;    <span class="comment">/* jobs内置指令 */</span></span><br><span class="line">     listjobs(jobs);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace06、trace07-gt-处理SIGINT信号"><a href="#trace06、trace07-gt-处理SIGINT信号" class="headerlink" title="trace06、trace07 -&gt;处理SIGINT信号"></a>trace06、trace07 -&gt;处理SIGINT信号</h3><p>(1)目的：</p><p>要实现的功能是：</p><p>trace06-&gt;将SIGINT信号转发到前台作业；</p><p>trace07-&gt;仅仅将SIGINT信号转发到前台作业；</p><p>因此这里放在一起实现。</p><p>(2)实现：</p><p>根据文档中的解决方法，我们来一步步实现。</p><p>1.首先更改一下eval函数，在其中调用setpgid(0,0)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">if</span>(setpgid(<span class="number">0</span>,<span class="number">0</span>) &lt; <span class="number">0</span>)&#123;               </span><br><span class="line"><span class="comment">/* 把子进程放到一个新进程组中，该进程组ID与子进程的PID相同。这将确保前台进程组中只有一个进程，即shell进程。*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setpgid error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="keyword">if</span>(execve(argv[<span class="number">0</span>],argv,environ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="comment">//第一个错误处理，直接在这里进行提示信息输出</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.更改信号处理函数sigint_handler(),实现转发到前台作业的操作（包含前台作业的进程组）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * sigint_handler - 当用户在键盘上键入ctrl+c时，内核向shell发送一个SIGINT。抓住它并把它发送到前台工作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);<span class="comment">/* 获取前台进程id */</span></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);     <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.还要修改sigchld_handler()函数：为了区分进程终止的原因（符合测试文件）（后边也会用到）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.是正常终止（exit或return）</span></span><br><span class="line"><span class="comment">//2.还是因为收到其他信号如：SIGINT而终止。（这里我们是收到SIGINT信号终止的）</span></span><br><span class="line"><span class="comment">/* 通过调用exit或者一个返回(return)正常终止 */</span></span><br><span class="line">    <span class="keyword">if</span>(WIFEXITED(status))&#123;</span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all); <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">        deletejob(jobs,pid);     </span><br><span class="line">        sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="literal">NULL</span>);                   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 子进程是因为一个未被捕获的信号终止的(SIGINT) */</span></span><br><span class="line">    <span class="keyword">if</span>(WIFSIGNALED(status))&#123;</span><br><span class="line">        <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>,jid,pid,WTERMSIG(status));</span><br><span class="line">        deletejob(jobs,pid);<span class="comment">/* 终止就删除pid的job */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6、Trace08-gt-仅仅将SIGSTP（ctrl-z）转发到前台作业（与上一题实现大同小异）"><a href="#6、Trace08-gt-仅仅将SIGSTP（ctrl-z）转发到前台作业（与上一题实现大同小异）" class="headerlink" title="6、Trace08 -&gt; 仅仅将SIGSTP（ctrl+z）转发到前台作业（与上一题实现大同小异）"></a>6、Trace08 -&gt; 仅仅将SIGSTP（ctrl+z）转发到前台作业（与上一题实现大同小异）</h3><p>（1）因此我们就直接实现其信号处理函数sigtstp_handler()：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sigtstp_handler - 每当用户在键盘上键入ctrl-z时，内核就向shell发送一个SIGTSTP。捕获它并通过向它发送SIGTSTP来挂起前台作业。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);    <span class="comment">/* 获取前台进程id */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);         <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）依旧来修改一下sigchld_handler()函数。区分终止&#x2F;停止。</p><p>思路：因此在上一题的基础上加上对于SIGTSTP（ctrl+z）的判断和信息显示。如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 引起返回的子进程当前是停止的(SIGTSTP) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSTOPPED(status))&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> =</span> getjobpid(jobs,pid);</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>,jid,pid,WSTOPSIG(status));</span><br><span class="line">            job-&gt;state = ST;<span class="comment">/* 状态设为停止(ST) */</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>并改变while的判断条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((pid = waitpid(<span class="number">-1</span>,&amp;status,WNOHANG | WUNTRACED)) &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>WNOHANG：挂起调用进程，直到有子进程终止。</p><p>WUNTRACED：挂起调用进程，直到等待集合中的一个进程变成已终止或者被停止。</p><p>WNOHANG | WUNTRACED：等待集合中的子进程都没有被停止或终止，则返回值为0；如果有一个停止或终止，则返回值为该子进程的PID。</p><p>两个合在一起就是接收终止和停止(ctrl+z和ctrl+c)。</p><hr><h3 id="trace-09-—-gt-实现进程内置命令bg"><a href="#trace-09-—-gt-实现进程内置命令bg" class="headerlink" title="trace 09 —&gt; 实现进程内置命令bg"></a>trace 09 —&gt; 实现进程内置命令bg</h3><p>bg &lt; job &gt;:命令会向一个已经停止的job发送SIGCNOT信号来重启这个job，并作为后台作业运行，参数可以是PID或JID。</p><p>（1）首先是完成识别命令：</p><p>要将bg命令添加到识别命令的函数builtin_cmd()中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;      <span class="comment">/* bg内置指令 */</span></span><br><span class="line">    do_bgfg(argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）接下来实现其处理函数：</p><p>修改do_bgfg()函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_bgfg</span><span class="params">(<span class="type">char</span> **argv)</span> </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">pid_t</span> pid;                      <span class="comment">/* 进程id */</span></span><br><span class="line">    <span class="type">int</span> jid;                        <span class="comment">/* job的id */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span>)&#123;   <span class="comment">/* 如果输入的是jid（作业） */</span></span><br><span class="line">        jid = atoi(argv[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">        job = getjobjid(jobs,jid);<span class="comment">//通过jid找到需要执行的job</span></span><br><span class="line">        pid = job-&gt;pid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;                              <span class="comment">/* 给的是pid */</span></span><br><span class="line">        pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">        job = getjobpid(jobs,pid);</span><br><span class="line">        jid = job-&gt;jid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;          <span class="comment">/* bg内置指令 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,jid,pid,job-&gt;cmdline);</span><br><span class="line">            job-&gt;state = BG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">            kill(-pid,SIGCONT);              <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace-10-—-gt-实现进程内置命令fg（与上一题差不多）"><a href="#trace-10-—-gt-实现进程内置命令fg（与上一题差不多）" class="headerlink" title="trace 10 —&gt; 实现进程内置命令fg（与上一题差不多）"></a>trace 10 —&gt; 实现进程内置命令fg（与上一题差不多）</h3><p>  fg &lt; job &gt;:将一个已停止或正在运行的后台作业更改为正在前台运行的作业。</p><p>（1）老方法，先往builtin_cmd()函数添加内容:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;      <span class="comment">/* fg内置指令 */</span></span><br><span class="line">  do_bgfg(argv);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）然后往do_bgfg()函数中加入相关处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;          <span class="comment">/* fg内置指令 */</span></span><br><span class="line">      <span class="keyword">if</span>(job-&gt;state = ST)&#123;</span><br><span class="line">        kill(-pid,SIGCONT);             <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">      &#125;     </span><br><span class="line">        job-&gt;state = FG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">        waitfg(pid);                    <span class="comment">/* 等待前台job完成 */</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace11-12"><a href="#trace11-12" class="headerlink" title="trace11,12"></a>trace11,12</h3><p>trace 11 —&gt; 将SIGINT转发给前台进程组中的每个进程</p><p>trace 12 —&gt; 将SIGSTP转发给前台进程组中的每个进程</p><p>这两个实验在之前的trace06-trace07的分析中已经实现了，因此我们直接执行即可：</p><p>（1）sigint_handler（）函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);<span class="comment">/* 获取前台进程id */</span></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);     <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）sigtstp_handler（）函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);    <span class="comment">/* 获取前台进程id */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);         <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace13-–-gt-重新启动进程组中每个已经停止的进程"><a href="#trace13-–-gt-重新启动进程组中每个已经停止的进程" class="headerlink" title="trace13 –&gt;重新启动进程组中每个已经停止的进程"></a>trace13 –&gt;重新启动进程组中每个已经停止的进程</h3><p>(1)分析：</p><p>· 因为此时需要唤醒所有停止的进程，因此要将唤醒函数kill(pid,SIGCONT)的第一个参数改为-pid，因为当其第一个参数&lt;0时，kill就会将SIGCONT信号传递给整个进程组。</p><p>· 因为在FG中，有一步是需要等待当前的前台进程完成之后，才会唤醒进程组中的进程，所以为了保证唤醒所有进程，就要去掉FG中，job-&gt;state &#x3D;&#x3D; ST才传递SIGCONT信号的判断，因为当前运行进程可能没有停止(ST)，但是进程组中是有停止的，进程组中停止的这些也需要被唤醒。</p><p>（2）综上，我们得到以下实现do_bgfg()更改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;          <span class="comment">/* bg内置指令 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,jid,pid,job-&gt;cmdline);</span><br><span class="line">        job-&gt;state = BG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">        kill(-pid,SIGCONT);              <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;          <span class="comment">/* fg内置指令 */</span></span><br><span class="line">        job-&gt;state = FG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">        kill(-pid,SIGCONT);             <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">        waitfg(pid);                    <span class="comment">/* 等待前台job完成 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace14-简单的错误处理（就是处理输入未实现的命令、fg、bg参数不正确等错误情况）"><a href="#trace14-简单的错误处理（就是处理输入未实现的命令、fg、bg参数不正确等错误情况）" class="headerlink" title="trace14 简单的错误处理（就是处理输入未实现的命令、fg、bg参数不正确等错误情况）"></a>trace14 简单的错误处理（就是处理输入未实现的命令、fg、bg参数不正确等错误情况）</h3><p>(1)又直接运行make rtest14可知有五种处理方式，因此我们在do_bgfg()中进行对应的处理即可。</p><p>(2）处理：第一个错误：Command not found，未实现的命令。</p><p>我们再次回顾一下shell的执行流程：程序会首先执行 eval()，在 eval中进行判断（使用buildin_cmp()函数），如果发现命令不是内置命令，则会调用 fork()函数来新建一个子进程，在子进程中调用 execve()函数通过 argv[0]来寻找路径，并在子进程中运行路径中的可执行文件，如果找不到可执行文件，则说明命令为无效命令。因此我们在此处加入输出语句即可，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(execve(argv[<span class="number">0</span>],argv,environ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="comment">//第一个错误处理，直接在这里进行提示信息输出</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>第二个错误是：fg command requires PID or %jobid argument，fg命令时没有传入pid或jid。因此在do_bgfg()中实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (argv[<span class="number">1</span>] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二个错误是没有传入pid或者jid（为空），就报错并返回</span></span><br></pre></td></tr></table></figure><p>第三个错误是：fg: argument must be a PID or %jobid，传入了pid或jid，但是不符合规范（pid或jid必须为数字）。处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span>)&#123;   <span class="comment">/* 如果输入的是jid（作业） */</span></span><br><span class="line">        <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">1</span>] &lt; <span class="string">&#x27;0&#x27;</span> || argv[<span class="number">1</span>][<span class="number">1</span>] &gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fg: argument must be a PID or %%jobid\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//第三个错误命令是传入了，但是传入的数据不是不符合pid或jid的规范(输入必须为数字)</span></span><br></pre></td></tr></table></figure><p>第四个错误是：No such process，通过传入的pid找不到对应的作业（job&#x3D;null）处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     job = getjobjid(jobs,jid);<span class="comment">//通过jid找到需要执行的job</span></span><br><span class="line">     <span class="keyword">if</span>(job == <span class="literal">NULL</span>)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%%%d: No such job\n&quot;</span>,jid);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">//第四个错误就是通过jid找到的job==null，因此“NO such job”</span></span><br></pre></td></tr></table></figure><p>第五个错误：No such job，通过传入的jid找不到对应的job（job&#x3D;null）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        job = getjobpid(jobs,pid);</span><br><span class="line">        <span class="keyword">if</span>(job == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d): No such process\n&quot;</span>,pid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//第五个错误就是通过jid找到的job==null，因此“NO such job”</span></span><br></pre></td></tr></table></figure><p>此外，我们发现还有一行(如下)，这里我们和trace15一起解决。所以接下来看一下trace15.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsh&gt;fg %<span class="number">1</span></span><br><span class="line">job [<span class="number">1</span>] (<span class="number">3104</span>) stopped by signal <span class="number">20</span></span><br></pre></td></tr></table></figure><hr><h3 id="trace15–-gt-所有命令一起运行"><a href="#trace15–-gt-所有命令一起运行" class="headerlink" title="trace15–&gt;所有命令一起运行"></a>trace15–&gt;所有命令一起运行</h3><p>(1)经make rtest15可知是缺失两条消息的处理。那么首先查看一下文件trace15.txt，看看是因为什么信号出现这种情况：经查看发现一是INT信号将job10终止，二是TSTP信号将job1中断。因此我们就在终止信号处理函数sihchld_handler()中进行判断处理，并输出上述错误信息：</p><p>(2)处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 子进程是因为一个未被捕获的信号终止的(SIGINT) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSIGNALED(status))&#123;</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>,jid,pid,WTERMSIG(status));</span><br><span class="line">            deletejob(jobs,pid);<span class="comment">/* 终止就删除pid的job */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 引起返回的子进程当前是停止的(SIGTSTP) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSTOPPED(status))&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> =</span> getjobpid(jobs,pid);</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>,jid,pid,WSTOPSIG(status));</span><br><span class="line">            job-&gt;state = ST;   <span class="comment">/* 状态设为停止(ST) */</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace16-–-gt-测试shell是否能够处理来自其他进程而不是终端的SIGTSTP和SIGINT信号"><a href="#trace16-–-gt-测试shell是否能够处理来自其他进程而不是终端的SIGTSTP和SIGINT信号" class="headerlink" title="trace16 –&gt;测试shell是否能够处理来自其他进程而不是终端的SIGTSTP和SIGINT信号"></a>trace16 –&gt;测试shell是否能够处理来自其他进程而不是终端的SIGTSTP和SIGINT信号</h3><p>emmm,好像没有要做的事了，直接执行就行了。</p><hr><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>最后给出7个函数的完整代码</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">eval</span><span class="params">(<span class="type">char</span> *cmdline)</span> <span class="comment">//加载且执行命令</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *argv[MAXARGS];        <span class="comment">/* 参数列表execve() */</span></span><br><span class="line">    <span class="type">char</span> buf[MAXLINE];          <span class="comment">/* 保存修改的命令行 */</span></span><br><span class="line">    <span class="type">int</span> bg;                     <span class="comment">/* 这个作业应该在后台进行？ */</span></span><br><span class="line">    <span class="type">pid_t</span> pid;                  <span class="comment">/* 进程id*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf,cmdline);</span><br><span class="line">    bg = parseline(buf,argv);</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">0</span>] == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;                 <span class="comment">/* 忽略空命令 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">sigset_t</span> mask_all,mask_one,prev_one;</span><br><span class="line">    <span class="keyword">if</span>(!builtin_cmd(argv))&#123;</span><br><span class="line">        sigfillset(&amp;mask_all);  <span class="comment">/* 保存当前的阻塞信号集合(blocked位向量) */</span></span><br><span class="line">        sigemptyset(&amp;mask_one); <span class="comment">//初始化mask_one为空集</span></span><br><span class="line">        sigaddset(&amp;mask_one,SIGCHLD);<span class="comment">//添加SIGCHLD到mask_one中</span></span><br><span class="line">        <span class="comment">//以上三句保存了当前的已阻塞信号集合</span></span><br><span class="line"> </span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_one,&amp;prev_one);         <span class="comment">/* 添加mask_one中的信号到信号集合（blocked位向量），从而父进程保持SIGCHLD的阻塞*/</span></span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>)&#123;    <span class="comment">/* 子程序运行用户作业 */</span></span><br><span class="line"> </span><br><span class="line">            sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="literal">NULL</span>); <span class="comment">/* 因为子进程继承了它们父进程的被阻塞集合，所以在调用execve之前，必须解除子进程对SIGCHLD的阻塞，避免子进程fork出来的进程无法被回收*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">       <span class="keyword">if</span>(setpgid(<span class="number">0</span>,<span class="number">0</span>) &lt; <span class="number">0</span>)&#123;               </span><br><span class="line"><span class="comment">/* 把子进程放到一个新进程组中，该进程组ID与子进程的PID相同。这将确保前台进程组中只有一个进程，即shell进程。*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setpgid error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="keyword">if</span>(execve(argv[<span class="number">0</span>],argv,environ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="comment">//第一个错误处理，直接在这里进行提示信息输出</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_all,<span class="literal">NULL</span>);   <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">        addjob(jobs,pid,bg==<span class="number">1</span> ? BG : FG,cmdline); <span class="comment">/* 将子任务添加到任务列表中 */</span></span><br><span class="line">        sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="literal">NULL</span>);  <span class="comment">/* 解除子进程对SIGCHLD的阻塞 */</span></span><br><span class="line">        <span class="comment">/* 这样子sigchld_handler处理程序在我们将其添加到工作队列</span></span><br><span class="line"><span class="comment">            中之前是不会运行的。因为直到addjob()之后，我们才解除对SIGCHLD的阻塞</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 父任务等待前台任务结束 */</span></span><br><span class="line">        <span class="keyword">if</span> (!bg)&#123; <span class="comment">//如果不是后台进程，就等待当前的前台进程</span></span><br><span class="line">            waitfg(pid);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  <span class="comment">/* 否则就是后台进程，开始在后台工作 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,pid2jid(pid),pid,cmdline);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="builtin-cmd"><a href="#builtin-cmd" class="headerlink" title="builtin_cmd"></a>builtin_cmd</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">builtin_cmd</span><span class="params">(<span class="type">char</span> **argv)</span> <span class="comment">//判断当前命令是否为内置命令</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;quit&quot;</span>)) <span class="comment">//如果是内置命令quit</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);               <span class="comment">//就结束当前进程</span></span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;jobs&quot;</span>))&#123;    <span class="comment">/* jobs内置指令 */</span></span><br><span class="line">        listjobs(jobs);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;&amp;&quot;</span>)) <span class="comment">/* 忽略单&amp; */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//然后返回1，因为如果一个命令以&amp;结尾，shell应该在后台运行它，否则在前台运行；</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;      <span class="comment">/* bg内置指令 */</span></span><br><span class="line">    do_bgfg(argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;      <span class="comment">/* fg内置指令 */</span></span><br><span class="line">    do_bgfg(argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">/* 不是一个内置命令 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-bgfg"><a href="#do-bgfg" class="headerlink" title="do_bgfg"></a>do_bgfg</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_bgfg</span><span class="params">(<span class="type">char</span> **argv)</span> </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">pid_t</span> pid;                      <span class="comment">/* 进程id */</span></span><br><span class="line">    <span class="type">int</span> jid;                        <span class="comment">/* job的id */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (argv[<span class="number">1</span>] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二个错误是没有传入pid或者jid（为空），就报错并返回</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span>)&#123;   <span class="comment">/* 如果输入的是jid（作业） */</span></span><br><span class="line">        <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">1</span>] &lt; <span class="string">&#x27;0&#x27;</span> || argv[<span class="number">1</span>][<span class="number">1</span>] &gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fg: argument must be a PID or %%jobid\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//第三个错误命令是传入了，但是传入的数据不是不符合pid或jid的规范（输入必须为数字）</span></span><br><span class="line">   <span class="comment">//在这里判断并输出错误信息：fg: argument must be a PID or %%jobid\n</span></span><br><span class="line">        jid = atoi(argv[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">        job = getjobjid(jobs,jid);<span class="comment">//通过jid找到需要执行的job</span></span><br><span class="line">        <span class="keyword">if</span>(job == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%%%d: No such job\n&quot;</span>,jid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//第四个错误就是通过jid找到的job==null，因此“NO such job”</span></span><br><span class="line">        pid = job-&gt;pid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;                              <span class="comment">/* 给的是pid */</span></span><br><span class="line">        <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] &lt; <span class="string">&#x27;0&#x27;</span> || argv[<span class="number">1</span>][<span class="number">0</span>] &gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;bg: argument must be a PID or %%jobid\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">        job = getjobpid(jobs,pid);</span><br><span class="line">        <span class="keyword">if</span>(job == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d): No such process\n&quot;</span>,pid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//第五个错误就是通过jid找到的job==null，因此“NO such job”</span></span><br><span class="line">        jid = job-&gt;jid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;          <span class="comment">/* bg内置指令 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,jid,pid,job-&gt;cmdline);</span><br><span class="line">            job-&gt;state = BG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">            kill(-pid,SIGCONT);              <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;          <span class="comment">/* fg内置指令 */</span></span><br><span class="line">            job-&gt;state = FG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">            kill(-pid,SIGCONT);             <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">            waitfg(pid);                    <span class="comment">/* 等待前台job完成 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="waitfg"><a href="#waitfg" class="headerlink" title="waitfg"></a>waitfg</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">waitfg</span><span class="params">(<span class="type">pid_t</span> pid)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">/* 唯一的前台作业结束后，被sigchld_handler回收，deletejob()后，jobs列表中就没有前台作业了，</span></span><br><span class="line"><span class="comment">        循环fpgid(..)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span>(pid==fgpid(jobs))&#123;</span><br><span class="line">        sleep(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sigchld-handler"><a href="#sigchld-handler" class="headerlink" title="sigchld_handler"></a>sigchld_handler</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> olderrno = errno;</span><br><span class="line">    <span class="type">sigset_t</span> mask_all,prev_all;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line"> </span><br><span class="line">    sigfillset(&amp;mask_all);                          <span class="comment">/* 保存当前的信号集合(blocked位向量) */</span></span><br><span class="line">    <span class="keyword">while</span>((pid = waitpid(<span class="number">-1</span>,&amp;status,WNOHANG | WUNTRACED)) &gt; <span class="number">0</span>)&#123;    <span class="comment">/* WNOHANG:非阻塞的 */</span></span><br><span class="line">        <span class="comment">/* 通过调用exit或者一个返回(return)正常终止 */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFEXITED(status))&#123;</span><br><span class="line">            sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all); <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">            deletejob(jobs,pid);     </span><br><span class="line">            sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="literal">NULL</span>);                   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 子进程是因为一个未被捕获的信号终止的(SIGINT) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSIGNALED(status))&#123;</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>,jid,pid,WTERMSIG(status));</span><br><span class="line">            deletejob(jobs,pid);<span class="comment">/* 终止就删除pid的job */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 引起返回的子进程当前是停止的(SIGTSTP) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSTOPPED(status))&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> =</span> getjobpid(jobs,pid);</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>,jid,pid,WSTOPSIG(status));</span><br><span class="line">            job-&gt;state = ST;<span class="comment">/* 状态设为停止(ST) */</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    errno = olderrno;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sigint-handler"><a href="#sigint-handler" class="headerlink" title="sigint_handler"></a>sigint_handler</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);<span class="comment">/* 获取前台进程id */</span></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);     <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sigtstp_handler</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);    <span class="comment">/* 获取前台进程id */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);         <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22年5月的博客修改日志</title>
      <link href="/2022.5.change/"/>
      <url>/2022.5.change/</url>
      
        <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-19</p></div></div><div class='timeline-item-content'><p>背景主题</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-20</p></div></div><div class='timeline-item-content'><p>版权卡片</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-30</p></div></div><div class='timeline-item-content'><p>文章加密</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-31</p></div></div><div class='timeline-item-content'><p>留言板卡片</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-31</p></div></div><div class='timeline-item-content'><p>追番列表</p></div></div></div><hr><h2 id="背景主题"><a href="#背景主题" class="headerlink" title="背景主题"></a>背景主题</h2><p>butterfly这个主题的背景一开始是一个下拉图加上纯白图构成的，我觉得也还行。所以刚开始就用了个助手的图当下拉图就没管了。但是我又发现虽然这个下拉图确实很好看，但是这个纯白的背景看起来有点太素了，如果换成其他颜色的话又感觉和上面的图不太配，所以我就把下拉图给去了。但这样就得改改背景了，于是就找到了大佬<a href="https://www.antmoe.com/">@DreamyTZK</a>的背景设置，于是直接借鉴了一 下。效果就是我博客现在的样子，感觉挺不错的。至于详细的过程，可以看看大佬的博客</p><blockquote><p><a href="https://www.antmoe.com/posts/7198453/">Hexo 博客之 butterfly 主题优雅更换背景</a></p></blockquote><p>具体的css配置及使用可以去看大佬的博客，这里只提几个小问题</p><blockquote><p>文章里的butterfly版本是<mark class="hl-label red">2.3.0</mark> ,而我的版本是<mark class="hl-label blue">4.2.1</mark> ,这就导致了部分的class和id对应不上。比如背景就得换成#body-wrap，边栏的透明得在透明的css里新增.card-widget。</p></blockquote><blockquote><p>还有就是由于在css里新增了class和id，导致黑暗模式下部分模块颜色显示是正常的背景颜色，对应着在css里改改就行了。当然，你要是觉得这样很好看的话，不改也行。</p></blockquote><hr><h2 id="版权卡片"><a href="#版权卡片" class="headerlink" title="版权卡片"></a>版权卡片</h2><p>版权卡片本来是不准备改的，但在找其他东西的时候看见了，也就顺便改了，教程如下</p><blockquote><p>Nesxc的<a href="https://www.nesxc.com/117/">butterfly版权美化教程</a></p></blockquote><p>但是我在改背景的时候把整体背景都弄成透明了，所以版权卡片也透明了，不想透明的话在css里加个not(#post-copyright)就行了。</p><hr><h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p>本来是准备把整个网站加密的，但感觉每次进来都要输密码好麻烦，所以就用了这个文章加密。但他的输入框在输入的时候好丑，还有就是他那个退出按钮也感觉风格不太搭，回头看看怎么改改。项目地址如下</p><blockquote><p>MikeCoder的<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a>项目</p></blockquote><hr><h2 id="留言板卡片"><a href="#留言板卡片" class="headerlink" title="留言板卡片"></a>留言板卡片</h2><p>我薇！！！！！！但下面的2233娘,emmmmm,我回头找个时间把这个给弄弄。教程地址：</p><blockquote><p>店长的<a href="https://akilar.top/posts/e2d3c450/">Envelope Style Comments Bar</a></p></blockquote><hr><h2 id="追番列表"><a href="#追番列表" class="headerlink" title="追番列表"></a>追番列表</h2><p>找了很久，就只找到这个插件。但是这个展示会把所有的追番都搞出来，我觉得有点多了，就新注册了个bangumi的号展示最近的。</p><blockquote><p>有个小问题，更新bangumi番剧的时候总要跳”Error Error: connect ETIMEDOUT”的错误，我估摸着是他的展示是按b站来的，但bangumi没有人数这些统计，就导致了这个数据库连接错误的问题。也没啥改的必要，就是看着有点烦。</p></blockquote><blockquote><p>参考教程：HCLonely的<a href="https://hclonely.gitee.io/posts/8422e92e/">Hexo哔哩哔哩番剧页面插件</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于博客的一些事情</title>
      <link href="/1/"/>
      <url>/1/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>  其实一开始我是不准备用博客模板的，因为我这个人不是很喜欢用自己不了解的东西。所以我花了大 半个月去从0开始写了一个博客。顺便还练了练自己上个学期有点摆烂的Java和这个学期学的数据库啥的。在写的过程中遇到了一堆莫名奇妙的bug和折磨的期中考试。但我还是一直在做。本来吧，基本上都差不多已经写完了，但是我忽略了移动端适应的问题。结果在网页上面看着好好的界面，一缩小就直接gg。然后我自然要去搞这个移动端适应，对吧。但在折磨了大半个月之后，我发现我还是放弃的好,不然，我就该没时间复习期末了。</p><h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><p>  之所以会用hexo，主要原因是懒，所以干脆就直接摆烂了。然后在熟悉的时候，果然出现了一堆莫名奇妙的问题，但，还好它们都被顺利的解决了。现在这个博客也算是可以正常使用了（大雾）。但也就是能用而已，像什么nav的索引设置啊，底部footer的样式类型啊，评论留言啊什么的可以说是根本没有。但，它可以用了，所以，就这样吧，先用着再说，然后慢慢改吧。我估摸着，要把这个博客改的差不多符合我预期的话，得到期末了吧（虽然现在好像就是期末了）。那就先这样吧，快快乐乐摆大烂！</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
