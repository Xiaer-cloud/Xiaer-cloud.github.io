<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>22年的暑假总结</title>
      <link href="/2022summer/"/>
      <url>/2022summer/</url>
      
        <content type="html"><![CDATA[<p>这是一个颓废的暑假。</p><p>从回到家开始，就天天摆大烂，什么也没做，什么也没学。中间有段时间好歹还是洗了一下碗，过了没多久就又摆大烂了。</p><p>回到学校，开了idea，乐，30天到期了。又耗了我几十分钟去把它整好。</p><p>唉，还得继续小学期啊。</p>]]></content>
      
      
      <categories>
          
          <category> 总结 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>小学期之keil的使用</title>
      <link href="/keil/"/>
      <url>/keil/</url>
      
        <content type="html"><![CDATA[<h2 id="开头"><a href="#开头" class="headerlink" title="开头"></a>开头</h2><p>首先，你得要有个keil。至于怎么来，emmmm,自己百度。安装同理。毕竟我已经安好了，这篇文章也是为了以后自己还会用，所以就不写安装过程了。(其实是太多了，懒得写)</p><hr><h2 id="具体流程"><a href="#具体流程" class="headerlink" title="具体流程"></a>具体流程</h2><h3 id="打开软件"><a href="#打开软件" class="headerlink" title="打开软件"></a>打开软件</h3><p>emmmm，如题。</p><hr><h3 id="创建工程"><a href="#创建工程" class="headerlink" title="创建工程"></a>创建工程</h3><p>在顶部导航栏点击“project”，然后点击new uVision project，点击后在文件框中填写你的工程名，名字可以是任意英文字符组成的（在此时你最好在你所希望存储该工程的地方新建一文件夹）。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/a0e8a486-f93f-46e1-bd40-9314be0185c1.png"></p><hr><h3 id="选择芯片"><a href="#选择芯片" class="headerlink" title="选择芯片"></a>选择芯片</h3><p>输入工程名后会出现如下图所示的芯片选择对话框，选择你开发板上的型号即可（相信要看这张帖子的人是在学51单片机，此时只需选择Atmel,然后点击AT89c51即可。如下第二张图所示）。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/e244a3b1-8099-414e-bf89-0259df0e16cd.png"></p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/7506080f-ba4a-4741-b068-77847cc272ba.png"></p><hr><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><p>接下来会出现如下图所示画面，是跳入C函数之前执行的一段汇编代码，不加就用默认的启动代码，加了你没修改这段代码，那还是相当于用默认的启动代码，这时加和没加都一样。</p><p>比如说，你想另外设置SP的值，不用默入的，就可以加入，然后修改SP。</p><p>反正这个启动代码不用改，加不加无所谓。</p><p>根据你项目的需求决定是否添加。</p><p>如果你采用汇编语言写程序，建议别添加，添了还得改模块名称，麻烦。</p><p>如果你采用C语言，添加了有好处，避免你忘记有些初始化工作</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/31e5513f-5f93-4ea4-a8c5-5b71919ad98e.png"></p><hr><h3 id="文件创建及添加到工程项目"><a href="#文件创建及添加到工程项目" class="headerlink" title="文件创建及添加到工程项目"></a>文件创建及添加到工程项目</h3><p>接下来出现下面第一张图，先点击红色方框内新建文件，再点击蓝色方框内保存按钮。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/68810a22-1dca-48d1-8f90-4ea5d9a1d27d.png"></p><p>点击保存按钮后输入源文件名称加后缀名（如果你是用C语言编写程序后缀名为*.c;如果你是用汇编语言编写程序则后缀名为*.asm）并点击确认保存。</p><p>接下来的一步是将源文件加入到工程中，点击选中“源组1”（source group 1）并右击，再点击添加文件（Add files to）到源组1即可。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/1f177329-52b1-4ffb-a548-36317bcf91cb.png"></p><hr><h3 id="文件编译及hex文件生成"><a href="#文件编译及hex文件生成" class="headerlink" title="文件编译及hex文件生成"></a>文件编译及hex文件生成</h3><p>首先点击下图中红色方框内按钮，如果文件编写无误，应出现二图中0error提示(应该不会有人去管waring吧)。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/e67279d5-35c0-4f10-9989-1e79c7982934.png"></p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/bfd14ae9-68a7-4e6f-beea-2297f94f0c0f.png"></p><p>然后右击target1，并点击图中选项</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/d88b0fc6-90d8-4b58-98f3-2ff4de35eabd.png"></p><p>点击output,并勾选create hex file 选项，之后点击ok退出。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/da96a78a-54c0-4a4f-8327-8003509ad37e.png"></p><p>现在再次点击左上的编译检查按钮，就可以看见创建了hex文件，这时去对应文件夹下就可以看见hex文件了。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/2cad71b7-738a-4728-95df-323fa902ee53.png"></p>]]></content>
      
      
      <categories>
          
          <category> 工训中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 软件使用 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于485总线的评分系统</title>
      <link href="/485/"/>
      <url>/485/</url>
      
        <content type="html"><![CDATA[<h3 id="B级任务：双机评分"><a href="#B级任务：双机评分" class="headerlink" title="B级任务：双机评分"></a>B级任务：双机评分</h3><h3 id="一-任务要求"><a href="#一-任务要求" class="headerlink" title="一.任务要求"></a>一.任务要求</h3><p>使用两块STC板分别下载上一节所提供的.hex文件，搭建485双机通信电路，在Linux中编程实现打分程序代码。</p><hr><h3 id="二-任务步骤"><a href="#二-任务步骤" class="headerlink" title="二.任务步骤"></a>二.任务步骤</h3><p>1.阅读程序系统流程框图，明确双机通信的功能需求。</p><p>2.熟悉上一节中模拟MODBUS协议的数据包结构，相关功能码及附加数据定义协议中的检验字节，本打分系统采用累加和编码。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/458b8e68-cb2c-40cf-82dd-26d38a0c7c79.jpg"></p><p>3.回顾485总线数据收发实验，搭建双机通信电路。参考上一节内容确保STC从机编号和评分设定完成后，按下KEY2、KEY3按键标志，第1位和第8位LED灯被点亮。</p><p>4.PC端串口设置如下：</p><p>串口波特率：9600  数据位：8位   校验位：无  停止位：1</p><p>5.所编写的PC端程序应参考上一节中的通信协议完成一次完整的评分过程：</p><p>(1)需要包含串口的设置</p><p>(2)主节点发起从机检测过程：发送指定从机编号正常检测数据包，判断回应查询数据包是否符合上一节中的通信协议。</p><p>(3)主机获取从机评分过程：发送指定从机评分相关数据包，判断回应查询数据包是否符合上一节中的通信协议。</p><p>(4)主机发起结束评分的过程，若复位成功，STC从机上第1位和第8位LED灯会熄灭。</p><p>(5)展示串口相关信息，展示检测到的从机编号和从机的评分等。</p><h3 id="三-实验代码"><a href="#三-实验代码" class="headerlink" title="三.实验代码"></a>三.实验代码</h3><hr><p>1.相关调用函数主要为老师在端口实验中所给出的代码，这里就不做过多解释。</p><p>2.相关变量定义</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">unsigned</span> <span class="type">char</span> func_code1 = <span class="number">0x03</span>; <span class="comment">//读下位机功能码</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> func_code2 = <span class="number">0x08</span>; <span class="comment">//检测功能码</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> func_code3 = <span class="number">0x10</span>; <span class="comment">//地址错误功能码</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> func_code4 = <span class="number">0x01</span>; <span class="comment">//复位功能码</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addition_code1 = <span class="number">0x6f</span>; <span class="comment">//错误码</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addition_code2 = <span class="number">0x5a</span>; <span class="comment">//包头</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addition_code3 = <span class="number">0x00</span>; <span class="comment">//广播地址</span></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> addition_code4 = <span class="number">0x13</span>; <span class="comment">//自定义内容</span></span><br><span class="line"></span><br><span class="line"><span class="type">unsigned</span> <span class="type">char</span> tmp[<span class="number">28</span>] = &#123;<span class="number">0</span>&#125;; <span class="comment">//用于存放读取出来的数据的缓冲区</span></span><br><span class="line"><span class="type">int</span> rl;<span class="comment">//读取数据的长度（单位：字节）</span></span><br></pre></td></tr></table></figure><p>3.读入相关数据</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">0</span>] == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;请输入你的码：\n&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%i&quot;</span>, &amp;tmp_wirte[i]);</span><br><span class="line">tmp_wirte[<span class="number">4</span>] += (<span class="type">int</span>)tmp_wirte[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;第五位为：%02x\n&quot;</span>, tmp_wirte[<span class="number">4</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.剩余部分为根据相关代码进行发送接收</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">write(fd, tmp_wirte, <span class="number">5</span>);</span><br><span class="line">bzero(tmp, <span class="keyword">sizeof</span>(tmp)); <span class="comment">//把tmp对应的内存块的前sizeof(tmp)个字节置零</span></span><br><span class="line">ComRead(tmp, <span class="number">5</span>);</span><br><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">2</span>] == <span class="number">8</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主机检测从机是否正常相关数据包：\n&quot;</span>);</span><br><span class="line"><span class="type">int</span> flag = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, tmp[j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %02x&quot;</span>, tmp[j]);</span><br><span class="line"><span class="keyword">if</span> (tmp[j] != tmp_wirte[j])</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (flag)</span><br><span class="line">tmp_wirte[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">2</span>] == <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;主机获取从机评分相关数据包：&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (j = <span class="number">0</span>; j &lt; <span class="number">5</span>; j++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (j == <span class="number">0</span>)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%02x&quot;</span>, tmp[j]);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot; %02x&quot;</span>, tmp[j]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">2</span>] == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;此轮评分结束相关数据包&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (tmp_wirte[<span class="number">2</span>] == <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;\n\n&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">close(epid);</span><br><span class="line">close(fd);</span><br></pre></td></tr></table></figure><hr><h3 id="四-实验过程"><a href="#四-实验过程" class="headerlink" title="四.实验过程"></a>四.实验过程</h3><p>1.将对应16进制文件下载到对应板子，并使用杜邦线将上位机与下位机相连</p><p>2.连接成功后，先使用串口助手尝试传输功能</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/7390af08-d5f6-4bfa-9436-015b13f189d6.png"></p><p>3.然后将单片机连接到虚拟机上，运行对应函数，功能成功实现</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/3d0cac7c-5dce-4687-bc75-60dbc59b3790.png"></p><hr><h3 id="五-实验总结"><a href="#五-实验总结" class="headerlink" title="五.实验总结"></a>五.实验总结</h3><p>1.本次实验使用的代码语言为c语言，但由于我们对c语言的不熟悉给我们带来了很多的麻烦。例如16进制的输出需要使用02x占位；16进制数的累加需要直接相加而不能使用循环。这提醒我们要加强相关学习。</p><p>2.在数据传输时要传输多次才能成功接受一次，初步分析是杜邦线以及硬件间的连接不是特别紧密导致。</p><p>3.本次实验也提醒我们要多多尝试不同的方法，不能只盯着一个方法。</p>]]></content>
      
      
      <categories>
          
          <category> 工训中心 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 单片机 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>奇怪的图床增加了</title>
      <link href="/cloudsource/"/>
      <url>/cloudsource/</url>
      
        <content type="html"><![CDATA[<h2 id="来源"><a href="#来源" class="headerlink" title="来源"></a>来源</h2><p>本来我是准备找个oss的图床的，但，被推荐了微信小程序工具的云存储，一个10gb，账号可创建多个，还是免费的，突然感觉其他的图床不香了。</p><hr><h2 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h2><h3 id="账号创建"><a href="#账号创建" class="headerlink" title="账号创建"></a>账号创建</h3><blockquote><p><a href="https://unicloud.dcloud.net.cn/home">微信服务空间</a></p></blockquote><p>进入这个网页。然后进行相关注册和实名认证(需要身份证照片)。</p><h3 id="创建服务空间"><a href="#创建服务空间" class="headerlink" title="创建服务空间"></a>创建服务空间</h3><p>认证后，进入服务空间，点击右上角“创建服务空间按钮”，并按照对应规则创建并命名自己的云空间。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/0064800d-07c0-49f6-93cb-af6785af5238.png"></p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/12d92a1c-425c-4833-b345-e9d6f0b2b8b1.png"></p><blockquote><p>PS：阿里云的一个空间是10GB，腾讯云的一个空间是5GB。</p></blockquote><h3 id="上传图片"><a href="#上传图片" class="headerlink" title="上传图片"></a>上传图片</h3><p>成功创建服务空间后，点击自己的云空间进入，点击右上角的“上传文件”</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/2cf37bab-55e5-4354-b5ff-b0f6cf23699f.png"></p><p>然后将文件上传</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/47cea796-4445-4412-9ddb-0b2d249a14f1.png"></p><p>上传之后，点击文件的详情就可以看到文件链接，然后就可以使用了。</p><p><img src="https://vkceyugu.cdn.bspapp.com/VKCEYUGU-0ecbe108-fe1f-4867-af7e-a5814b22090f/99559904-8ba6-4dda-ae3a-7a2fa886d9c8.png"></p><hr><h2 id="一点小问题"><a href="#一点小问题" class="headerlink" title="一点小问题"></a>一点小问题</h2><h3 id="名字"><a href="#名字" class="headerlink" title="名字"></a>名字</h3><p>其实可以看到，在你引用图片的时候，网页链接和你的图片的名字是没有任何关系的，这就使得你在引用后如果不预览图片的话，直接看链接是不知道对应的图片是什么的。</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>其实这个空间和其他的云服务空间相比可以说是非常好的一个，免费，存储空间够大，对于我这种用量不够大个人用户可以说是完全满足需求了。并且这个空间是在国内的，访问速度也没有任何问题，非常丝滑。如果以后没有其他问题我应该会一直用这个当自己的云服务空间。</p>]]></content>
      
      
      <categories>
          
          <category> 教程 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 云服务 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>shell lab</title>
      <link href="/shelllab/"/>
      <url>/shelllab/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>计算机系统这学期一共有四个实验，其中的bomblab和buflab都特别有趣，让我学到了很多汇编相关的知识。至于第一次的datalab就，很怪。这次的shelllab也是让人摸不着头脑(结果就是得寻求高人的帮助)，但最后还是得做出来(不然实验验收就寄了)。这里就先传一手shelllab的报告，至于bomblab和buflab的就再等什么时候有空再弄了。</p><hr><h2 id="一．实验目的"><a href="#一．实验目的" class="headerlink" title="一．实验目的"></a>一．实验目的</h2><p>shell Lab的主要目的是为了让我们熟悉进程控制和信号。</p><h2 id="二．实验内容"><a href="#二．实验内容" class="headerlink" title="二．实验内容"></a>二．实验内容</h2><p>主要是对tsh.c中没有填写的函数进行填写，使得该shell能处理前后台运行程序、能够处理ctrl+z、ctrl+c等信号。需要实现的函数主要有以下七个：</p><p>eval: 主要功能是解析cmdline，并且运行.</p><p>builtin cmd: 辨识和解析出bulidin命令: quit, fg, bg, and jobs. </p><p>do bgfg: 实现bg和fg命令.</p><p>waitfg: 实现等待前台程序运行结束.</p><p>sigchld handler: 响应SIGCHLD.</p><p>sigint handler: 响应 SIGINT (ctrl-c) 信号.</p><p>sigtstp handler: 响应 SIGTSTP (ctrl-z) 信号.</p><hr><h2 id="三．实验过程"><a href="#三．实验过程" class="headerlink" title="三．实验过程"></a>三．实验过程</h2><h3 id="trace01-gt-正确终止EOF"><a href="#trace01-gt-正确终止EOF" class="headerlink" title="trace01 -&gt;  正确终止EOF"></a>trace01 -&gt;  正确终止EOF</h3><p>  直接运行就行了。</p><hr><h3 id="trace-02-03-gt-实现内置的quit"><a href="#trace-02-03-gt-实现内置的quit" class="headerlink" title="trace 02,03 -&gt;实现内置的quit"></a>trace 02,03 -&gt;实现内置的quit</h3><p>(1)首先观察trace02.txt文件，发现只有quit，WAIT两条命令。执行后可以发现无法正常终止，因为tsh的quit内置命令还未编写，所以不能正常退出。因此需要我们实现终止命令quit()。</p><p>(2)实现quit：</p><p>目的：补齐文件tsh.c中的函数eval()函数和函数builtin_cmd()与quit相关的部分。</p><p>实现思路：首先从命令中提取参数，然后判断是否为内置命令，如果为内置命令，则直接在当前进程执行即可；如果不是内置命令，则需要新建一个子进程，并利用 execve 来通过参数给出的路径寻找出可执行文件并在子进程中执行，如果找不到该可执行文件，则输出命令未找到，并结束子进程。</p><p>代码：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">eval</span><span class="params">(<span class="type">char</span> *cmdline)</span> <span class="comment">//加载且执行命令</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *argv[MAXARGS];        <span class="comment">/* 参数列表execve() */</span></span><br><span class="line">    <span class="type">char</span> buf[MAXLINE];          <span class="comment">/* 保存修改的命令行 */</span></span><br><span class="line">    <span class="type">pid_t</span> pid;                  <span class="comment">/* 进程id*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf,cmdline);</span><br><span class="line">    parseline(buf,argv);        <span class="comment">/*提取argv8*/</span></span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">0</span>] == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;                 <span class="comment">/* 忽略空命令 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(!builtin_cmd(argv))&#123;</span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>)&#123;    <span class="comment">/* 子程序运行用户作业 */</span></span><br><span class="line">          <span class="keyword">if</span>(execve(arg[v0],argv,environ)&lt;<span class="number">0</span>)&#123;</span><br><span class="line">              <span class="comment">//判断是否找得到对应可执行文件</span></span><br><span class="line">              <span class="built_in">printf</span>(<span class="string">&quot;%s: 命令未找到.\n&quot;</span>,arg[<span class="number">0</span>]);</span><br><span class="line">              <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">              <span class="comment">//找不到就退出，并终止进程</span></span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line">     <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>(3)然后是判断是否为内置命令的函数builtin_cmd()：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">builtin_cmd</span><span class="params">(<span class="type">char</span> **argv)</span> <span class="comment">//判断当前命令是否为内置命令</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;quit&quot;</span>)) <span class="comment">//如果是内置命令quit</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);               <span class="comment">//就结束当前进程</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">/* 不是一个内置命令 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此外，因为tset03功能是运行一个前台job，并且也是以quit终止，因此也同时完成了。</p><hr><h3 id="trace04-–-gt-实现eval-的后台作业（BK-job）管理功能"><a href="#trace04-–-gt-实现eval-的后台作业（BK-job）管理功能" class="headerlink" title="trace04 –&gt;实现eval()的后台作业（BK job）管理功能"></a>trace04 –&gt;实现eval()的后台作业（BK job）管理功能</h3><p>（1）思路：</p><p>·在原有的eval函数基础之上添加将作业添加至后台作业管理的函数使用（addjobs（））。</p><p>·加以信号的阻塞和取消阻塞。</p><p>（2）具体实现：</p><p>1.首先使用一个标记符号 –&gt; bg</p><p>2.因为要分析传入指令是否要在后台执行进程，因此要补充分析命令的函数builtin_cmd()</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;&amp;&quot;</span>)) <span class="comment">/* 忽略单&amp; */</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//然后返回1，因为如果一个命令以&amp;结尾，shell应该在后台运行它，否则在前台运行；</span></span><br></pre></td></tr></table></figure><p>3.接着在eval中进行判断是否为后台进程</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 父任务等待前台任务结束 */</span></span><br><span class="line">        <span class="keyword">if</span> (!bg)&#123; <span class="comment">//如果不是后台进程，就等待当前的前台进程</span></span><br><span class="line">            waitfg(pid);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  <span class="comment">/* 否则就是后台进程，开始在后台工作 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,pid2jid(pid),pid,cmdline);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>4.再将waitfg()函数补充完整,让父进程正确地等待。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">waitfg</span><span class="params">(<span class="type">pid_t</span> pid)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">/* 唯一的前台作业结束后，被sigchld_handler回收，deletejob()后，jobs列表中就没有前台作业了，</span></span><br><span class="line"><span class="comment">        循环fpgid(..)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span>(pid==fgpid(jobs))&#123;</span><br><span class="line">        sleep(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.接下来实现信号的控制，这里使用sigprocmask()函数显式地阻塞和取消阻塞</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!builtin_cmd(argv))&#123;</span><br><span class="line">        sigfillset(&amp;mask_all);  <span class="comment">/* 保存当前的阻塞信号集合(blocked位向量) */</span></span><br><span class="line">        sigemptyset(&amp;mask_one); <span class="comment">//初始化mask_one为空集</span></span><br><span class="line">        sigaddset(&amp;mask_one,SIGCHLD);<span class="comment">//添加SIGCHLD到mask_one中</span></span><br><span class="line">        <span class="comment">//以上三句保存了当前的已阻塞信号集合</span></span><br><span class="line"> </span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_one,&amp;prev_one);         <span class="comment">/* 添加mask_one中的信号到信号集合（blocked位向量），从而父进程保持SIGCHLD的阻塞*/</span></span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>)&#123;    <span class="comment">/* 子程序运行用户作业 */</span></span><br><span class="line"> </span><br><span class="line">            sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="literal">NULL</span>); <span class="comment">/* 因为子进程继承了它们父进程的被阻塞集合，所以在调用execve之前，必须解除子进程对SIGCHLD的阻塞，避免子进程fork出来的进程无法被回收*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">       <span class="keyword">if</span>(setpgid(<span class="number">0</span>,<span class="number">0</span>) &lt; <span class="number">0</span>)&#123;               </span><br><span class="line"><span class="comment">/* 把子进程放到一个新进程组中，该进程组ID与子进程的PID相同。这将确保前台进程组中只有一个进程，即shell进程。*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setpgid error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="keyword">if</span>(execve(argv[<span class="number">0</span>],argv,environ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="comment">//第一个错误处理，直接在这里进行提示信息输出</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_all,<span class="literal">NULL</span>);   <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">        addjob(jobs,pid,bg==<span class="number">1</span> ? BG : FG,cmdline); <span class="comment">/* 将子任务添加到任务列表中 */</span></span><br><span class="line">        sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="literal">NULL</span>);  <span class="comment">/* 解除子进程对SIGCHLD的阻塞 */</span></span><br><span class="line">        <span class="comment">/* 这样子sigchld_handler处理程序在我们将其添加到工作队列</span></span><br><span class="line"><span class="comment">            中之前是不会运行的。因为直到addjob()之后，我们才解除对SIGCHLD的阻塞</span></span><br><span class="line"><span class="comment">         */</span></span><br></pre></td></tr></table></figure><p>6.接下来实现对应的sigcld_handler()以释放僵尸的子进程。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * sigchld_handler - 每当子作业终止(变成僵尸)，或者因为收到SIGSTOP或SIGTSTP信号而停止时，</span></span><br><span class="line"><span class="comment"> * 内核就向shell发送SIGCHLD。该处理程序获取所有可用的僵尸子进程，</span></span><br><span class="line"><span class="comment"> * 但不等待任何其他当前运行的子进程终止。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> olderrno = errno;</span><br><span class="line">    <span class="type">sigset_t</span> mask_all,prev_all;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line"> </span><br><span class="line">    sigfillset(&amp;mask_all);         <span class="comment">/* 保存当前的信号集合(blocked位向量) */</span></span><br><span class="line">    <span class="keyword">while</span>((pid = waitpid(<span class="number">-1</span>,<span class="literal">NULL</span>,WNOHANG)) &gt; <span class="number">0</span>)&#123;    </span><br><span class="line">      sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all); <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">      deletejob(jobs,pid);    /释放僵尸进程/</span><br><span class="line">      sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="literal">NULL</span>); <span class="comment">//解除阻塞</span></span><br><span class="line">    &#125;</span><br><span class="line">    errno = olderrno;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.综上，我们的addjobs就成功实现了！</p><hr><h3 id="trace05-–-gt-处理jobs内置命令"><a href="#trace05-–-gt-处理jobs内置命令" class="headerlink" title="trace05 –&gt;处理jobs内置命令"></a>trace05 –&gt;处理jobs内置命令</h3><p>(1)思路：直接调用自带的listjobs()方法，就是在原有builtin_cmd函数中添加一个判断函数，如果参数是jobs，则执行listjobs函数的功能（即将所有的作业打印出来）。</p><p>(2)实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;jobs&quot;</span>))&#123;    <span class="comment">/* jobs内置指令 */</span></span><br><span class="line">     listjobs(jobs);</span><br><span class="line">     <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace06、trace07-gt-处理SIGINT信号"><a href="#trace06、trace07-gt-处理SIGINT信号" class="headerlink" title="trace06、trace07 -&gt;处理SIGINT信号"></a>trace06、trace07 -&gt;处理SIGINT信号</h3><p>(1)目的：</p><p>要实现的功能是：</p><p>trace06-&gt;将SIGINT信号转发到前台作业；</p><p>trace07-&gt;仅仅将SIGINT信号转发到前台作业；</p><p>因此这里放在一起实现。</p><p>(2)实现：</p><p>根据文档中的解决方法，我们来一步步实现。</p><p>1.首先更改一下eval函数，在其中调用setpgid(0,0)：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">       <span class="keyword">if</span>(setpgid(<span class="number">0</span>,<span class="number">0</span>) &lt; <span class="number">0</span>)&#123;               </span><br><span class="line"><span class="comment">/* 把子进程放到一个新进程组中，该进程组ID与子进程的PID相同。这将确保前台进程组中只有一个进程，即shell进程。*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setpgid error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="keyword">if</span>(execve(argv[<span class="number">0</span>],argv,environ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="comment">//第一个错误处理，直接在这里进行提示信息输出</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>2.更改信号处理函数sigint_handler(),实现转发到前台作业的操作（包含前台作业的进程组）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * sigint_handler - 当用户在键盘上键入ctrl+c时，内核向shell发送一个SIGINT。抓住它并把它发送到前台工作。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);<span class="comment">/* 获取前台进程id */</span></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);     <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.还要修改sigchld_handler()函数：为了区分进程终止的原因（符合测试文件）（后边也会用到）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//1.是正常终止（exit或return）</span></span><br><span class="line"><span class="comment">//2.还是因为收到其他信号如：SIGINT而终止。（这里我们是收到SIGINT信号终止的）</span></span><br><span class="line"><span class="comment">/* 通过调用exit或者一个返回(return)正常终止 */</span></span><br><span class="line">    <span class="keyword">if</span>(WIFEXITED(status))&#123;</span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all); <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">        deletejob(jobs,pid);     </span><br><span class="line">        sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="literal">NULL</span>);                   </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/* 子进程是因为一个未被捕获的信号终止的(SIGINT) */</span></span><br><span class="line">    <span class="keyword">if</span>(WIFSIGNALED(status))&#123;</span><br><span class="line">        <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>,jid,pid,WTERMSIG(status));</span><br><span class="line">        deletejob(jobs,pid);<span class="comment">/* 终止就删除pid的job */</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="6、Trace08-gt-仅仅将SIGSTP（ctrl-z）转发到前台作业（与上一题实现大同小异）"><a href="#6、Trace08-gt-仅仅将SIGSTP（ctrl-z）转发到前台作业（与上一题实现大同小异）" class="headerlink" title="6、Trace08 -&gt; 仅仅将SIGSTP（ctrl+z）转发到前台作业（与上一题实现大同小异）"></a>6、Trace08 -&gt; 仅仅将SIGSTP（ctrl+z）转发到前台作业（与上一题实现大同小异）</h3><p>（1）因此我们就直接实现其信号处理函数sigtstp_handler()：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * sigtstp_handler - 每当用户在键盘上键入ctrl-z时，内核就向shell发送一个SIGTSTP。捕获它并通过向它发送SIGTSTP来挂起前台作业。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">void</span> <span class="title function_">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);    <span class="comment">/* 获取前台进程id */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);         <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）依旧来修改一下sigchld_handler()函数。区分终止&#x2F;停止。</p><p>思路：因此在上一题的基础上加上对于SIGTSTP（ctrl+z）的判断和信息显示。如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 引起返回的子进程当前是停止的(SIGTSTP) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSTOPPED(status))&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> =</span> getjobpid(jobs,pid);</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>,jid,pid,WSTOPSIG(status));</span><br><span class="line">            job-&gt;state = ST;<span class="comment">/* 状态设为停止(ST) */</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>并改变while的判断条件：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>((pid = waitpid(<span class="number">-1</span>,&amp;status,WNOHANG | WUNTRACED)) &gt; <span class="number">0</span>)</span><br></pre></td></tr></table></figure><p>WNOHANG：挂起调用进程，直到有子进程终止。</p><p>WUNTRACED：挂起调用进程，直到等待集合中的一个进程变成已终止或者被停止。</p><p>WNOHANG | WUNTRACED：等待集合中的子进程都没有被停止或终止，则返回值为0；如果有一个停止或终止，则返回值为该子进程的PID。</p><p>两个合在一起就是接收终止和停止(ctrl+z和ctrl+c)。</p><hr><h3 id="trace-09-—-gt-实现进程内置命令bg"><a href="#trace-09-—-gt-实现进程内置命令bg" class="headerlink" title="trace 09 —&gt; 实现进程内置命令bg"></a>trace 09 —&gt; 实现进程内置命令bg</h3><p>bg &lt; job &gt;:命令会向一个已经停止的job发送SIGCNOT信号来重启这个job，并作为后台作业运行，参数可以是PID或JID。</p><p>（1）首先是完成识别命令：</p><p>要将bg命令添加到识别命令的函数builtin_cmd()中：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;      <span class="comment">/* bg内置指令 */</span></span><br><span class="line">    do_bgfg(argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）接下来实现其处理函数：</p><p>修改do_bgfg()函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_bgfg</span><span class="params">(<span class="type">char</span> **argv)</span> </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">pid_t</span> pid;                      <span class="comment">/* 进程id */</span></span><br><span class="line">    <span class="type">int</span> jid;                        <span class="comment">/* job的id */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span>)&#123;   <span class="comment">/* 如果输入的是jid（作业） */</span></span><br><span class="line">        jid = atoi(argv[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">        job = getjobjid(jobs,jid);<span class="comment">//通过jid找到需要执行的job</span></span><br><span class="line">        pid = job-&gt;pid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;                              <span class="comment">/* 给的是pid */</span></span><br><span class="line">        pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">        job = getjobpid(jobs,pid);</span><br><span class="line">        jid = job-&gt;jid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;          <span class="comment">/* bg内置指令 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,jid,pid,job-&gt;cmdline);</span><br><span class="line">            job-&gt;state = BG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">            kill(-pid,SIGCONT);              <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">       <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace-10-—-gt-实现进程内置命令fg（与上一题差不多）"><a href="#trace-10-—-gt-实现进程内置命令fg（与上一题差不多）" class="headerlink" title="trace 10 —&gt; 实现进程内置命令fg（与上一题差不多）"></a>trace 10 —&gt; 实现进程内置命令fg（与上一题差不多）</h3><p>  fg &lt; job &gt;:将一个已停止或正在运行的后台作业更改为正在前台运行的作业。</p><p>（1）老方法，先往builtin_cmd()函数添加内容:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;      <span class="comment">/* fg内置指令 */</span></span><br><span class="line">  do_bgfg(argv);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）然后往do_bgfg()函数中加入相关处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;          <span class="comment">/* fg内置指令 */</span></span><br><span class="line">      <span class="keyword">if</span>(job-&gt;state = ST)&#123;</span><br><span class="line">        kill(-pid,SIGCONT);             <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">      &#125;     </span><br><span class="line">        job-&gt;state = FG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">        waitfg(pid);                    <span class="comment">/* 等待前台job完成 */</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace11-12"><a href="#trace11-12" class="headerlink" title="trace11,12"></a>trace11,12</h3><p>trace 11 —&gt; 将SIGINT转发给前台进程组中的每个进程</p><p>trace 12 —&gt; 将SIGSTP转发给前台进程组中的每个进程</p><p>这两个实验在之前的trace06-trace07的分析中已经实现了，因此我们直接执行即可：</p><p>（1）sigint_handler（）函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);<span class="comment">/* 获取前台进程id */</span></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);     <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>（2）sigtstp_handler（）函数：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);    <span class="comment">/* 获取前台进程id */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);         <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace13-–-gt-重新启动进程组中每个已经停止的进程"><a href="#trace13-–-gt-重新启动进程组中每个已经停止的进程" class="headerlink" title="trace13 –&gt;重新启动进程组中每个已经停止的进程"></a>trace13 –&gt;重新启动进程组中每个已经停止的进程</h3><p>(1)分析：</p><p>· 因为此时需要唤醒所有停止的进程，因此要将唤醒函数kill(pid,SIGCONT)的第一个参数改为-pid，因为当其第一个参数&lt;0时，kill就会将SIGCONT信号传递给整个进程组。</p><p>· 因为在FG中，有一步是需要等待当前的前台进程完成之后，才会唤醒进程组中的进程，所以为了保证唤醒所有进程，就要去掉FG中，job-&gt;state &#x3D;&#x3D; ST才传递SIGCONT信号的判断，因为当前运行进程可能没有停止(ST)，但是进程组中是有停止的，进程组中停止的这些也需要被唤醒。</p><p>（2）综上，我们得到以下实现do_bgfg()更改：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;          <span class="comment">/* bg内置指令 */</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,jid,pid,job-&gt;cmdline);</span><br><span class="line">        job-&gt;state = BG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">        kill(-pid,SIGCONT);              <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">        </span><br><span class="line">    &#125;<span class="keyword">else</span></span><br><span class="line">    <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;          <span class="comment">/* fg内置指令 */</span></span><br><span class="line">        job-&gt;state = FG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">        kill(-pid,SIGCONT);             <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">        waitfg(pid);                    <span class="comment">/* 等待前台job完成 */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace14-简单的错误处理（就是处理输入未实现的命令、fg、bg参数不正确等错误情况）"><a href="#trace14-简单的错误处理（就是处理输入未实现的命令、fg、bg参数不正确等错误情况）" class="headerlink" title="trace14 简单的错误处理（就是处理输入未实现的命令、fg、bg参数不正确等错误情况）"></a>trace14 简单的错误处理（就是处理输入未实现的命令、fg、bg参数不正确等错误情况）</h3><p>(1)又直接运行make rtest14可知有五种处理方式，因此我们在do_bgfg()中进行对应的处理即可。</p><p>(2）处理：第一个错误：Command not found，未实现的命令。</p><p>我们再次回顾一下shell的执行流程：程序会首先执行 eval()，在 eval中进行判断（使用buildin_cmp()函数），如果发现命令不是内置命令，则会调用 fork()函数来新建一个子进程，在子进程中调用 execve()函数通过 argv[0]来寻找路径，并在子进程中运行路径中的可执行文件，如果找不到可执行文件，则说明命令为无效命令。因此我们在此处加入输出语句即可，如下：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(execve(argv[<span class="number">0</span>],argv,environ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="comment">//第一个错误处理，直接在这里进行提示信息输出</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br></pre></td></tr></table></figure><p>第二个错误是：fg command requires PID or %jobid argument，fg命令时没有传入pid或jid。因此在do_bgfg()中实现：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (argv[<span class="number">1</span>] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二个错误是没有传入pid或者jid（为空），就报错并返回</span></span><br></pre></td></tr></table></figure><p>第三个错误是：fg: argument must be a PID or %jobid，传入了pid或jid，但是不符合规范（pid或jid必须为数字）。处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"> <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span>)&#123;   <span class="comment">/* 如果输入的是jid（作业） */</span></span><br><span class="line">        <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">1</span>] &lt; <span class="string">&#x27;0&#x27;</span> || argv[<span class="number">1</span>][<span class="number">1</span>] &gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fg: argument must be a PID or %%jobid\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//第三个错误命令是传入了，但是传入的数据不是不符合pid或jid的规范(输入必须为数字)</span></span><br></pre></td></tr></table></figure><p>第四个错误是：No such process，通过传入的pid找不到对应的作业（job&#x3D;null）处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">     job = getjobjid(jobs,jid);<span class="comment">//通过jid找到需要执行的job</span></span><br><span class="line">     <span class="keyword">if</span>(job == <span class="literal">NULL</span>)&#123;</span><br><span class="line">         <span class="built_in">printf</span>(<span class="string">&quot;%%%d: No such job\n&quot;</span>,jid);</span><br><span class="line">         <span class="keyword">return</span>;</span><br><span class="line">     &#125;</span><br><span class="line"><span class="comment">//第四个错误就是通过jid找到的job==null，因此“NO such job”</span></span><br></pre></td></tr></table></figure><p>第五个错误：No such job，通过传入的jid找不到对应的job（job&#x3D;null）</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">        job = getjobpid(jobs,pid);</span><br><span class="line">        <span class="keyword">if</span>(job == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d): No such process\n&quot;</span>,pid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//第五个错误就是通过jid找到的job==null，因此“NO such job”</span></span><br></pre></td></tr></table></figure><p>此外，我们发现还有一行(如下)，这里我们和trace15一起解决。所以接下来看一下trace15.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tsh&gt;fg %<span class="number">1</span></span><br><span class="line">job [<span class="number">1</span>] (<span class="number">3104</span>) stopped by signal <span class="number">20</span></span><br></pre></td></tr></table></figure><hr><h3 id="trace15–-gt-所有命令一起运行"><a href="#trace15–-gt-所有命令一起运行" class="headerlink" title="trace15–&gt;所有命令一起运行"></a>trace15–&gt;所有命令一起运行</h3><p>(1)经make rtest15可知是缺失两条消息的处理。那么首先查看一下文件trace15.txt，看看是因为什么信号出现这种情况：经查看发现一是INT信号将job10终止，二是TSTP信号将job1中断。因此我们就在终止信号处理函数sihchld_handler()中进行判断处理，并输出上述错误信息：</p><p>(2)处理：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 子进程是因为一个未被捕获的信号终止的(SIGINT) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSIGNALED(status))&#123;</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>,jid,pid,WTERMSIG(status));</span><br><span class="line">            deletejob(jobs,pid);<span class="comment">/* 终止就删除pid的job */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 引起返回的子进程当前是停止的(SIGTSTP) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSTOPPED(status))&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> =</span> getjobpid(jobs,pid);</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>,jid,pid,WSTOPSIG(status));</span><br><span class="line">            job-&gt;state = ST;   <span class="comment">/* 状态设为停止(ST) */</span></span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="trace16-–-gt-测试shell是否能够处理来自其他进程而不是终端的SIGTSTP和SIGINT信号"><a href="#trace16-–-gt-测试shell是否能够处理来自其他进程而不是终端的SIGTSTP和SIGINT信号" class="headerlink" title="trace16 –&gt;测试shell是否能够处理来自其他进程而不是终端的SIGTSTP和SIGINT信号"></a>trace16 –&gt;测试shell是否能够处理来自其他进程而不是终端的SIGTSTP和SIGINT信号</h3><p>emmm,好像没有要做的事了，直接执行就行了。</p><hr><h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><p>最后给出7个函数的完整代码</p><h3 id="eval"><a href="#eval" class="headerlink" title="eval"></a>eval</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">eval</span><span class="params">(<span class="type">char</span> *cmdline)</span> <span class="comment">//加载且执行命令</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">char</span> *argv[MAXARGS];        <span class="comment">/* 参数列表execve() */</span></span><br><span class="line">    <span class="type">char</span> buf[MAXLINE];          <span class="comment">/* 保存修改的命令行 */</span></span><br><span class="line">    <span class="type">int</span> bg;                     <span class="comment">/* 这个作业应该在后台进行？ */</span></span><br><span class="line">    <span class="type">pid_t</span> pid;                  <span class="comment">/* 进程id*/</span></span><br><span class="line">    <span class="built_in">strcpy</span>(buf,cmdline);</span><br><span class="line">    bg = parseline(buf,argv);</span><br><span class="line">    <span class="keyword">if</span>(argv[<span class="number">0</span>] == <span class="literal">NULL</span>)</span><br><span class="line">        <span class="keyword">return</span>;                 <span class="comment">/* 忽略空命令 */</span></span><br><span class="line"> </span><br><span class="line">    <span class="type">sigset_t</span> mask_all,mask_one,prev_one;</span><br><span class="line">    <span class="keyword">if</span>(!builtin_cmd(argv))&#123;</span><br><span class="line">        sigfillset(&amp;mask_all);  <span class="comment">/* 保存当前的阻塞信号集合(blocked位向量) */</span></span><br><span class="line">        sigemptyset(&amp;mask_one); <span class="comment">//初始化mask_one为空集</span></span><br><span class="line">        sigaddset(&amp;mask_one,SIGCHLD);<span class="comment">//添加SIGCHLD到mask_one中</span></span><br><span class="line">        <span class="comment">//以上三句保存了当前的已阻塞信号集合</span></span><br><span class="line"> </span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_one,&amp;prev_one);         <span class="comment">/* 添加mask_one中的信号到信号集合（blocked位向量），从而父进程保持SIGCHLD的阻塞*/</span></span><br><span class="line">        <span class="keyword">if</span>((pid = fork()) == <span class="number">0</span>)&#123;    <span class="comment">/* 子程序运行用户作业 */</span></span><br><span class="line"> </span><br><span class="line">            sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="literal">NULL</span>); <span class="comment">/* 因为子进程继承了它们父进程的被阻塞集合，所以在调用execve之前，必须解除子进程对SIGCHLD的阻塞，避免子进程fork出来的进程无法被回收*/</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">       <span class="keyword">if</span>(setpgid(<span class="number">0</span>,<span class="number">0</span>) &lt; <span class="number">0</span>)&#123;               </span><br><span class="line"><span class="comment">/* 把子进程放到一个新进程组中，该进程组ID与子进程的PID相同。这将确保前台进程组中只有一个进程，即shell进程。*/</span></span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;setpgid error&quot;</span>);</span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">            <span class="keyword">if</span>(execve(argv[<span class="number">0</span>],argv,environ) &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                <span class="built_in">printf</span>(<span class="string">&quot;%s: Command not found.\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">       <span class="comment">//第一个错误处理，直接在这里进行提示信息输出</span></span><br><span class="line">                <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        sigprocmask(SIG_BLOCK,&amp;mask_all,<span class="literal">NULL</span>);   <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">        addjob(jobs,pid,bg==<span class="number">1</span> ? BG : FG,cmdline); <span class="comment">/* 将子任务添加到任务列表中 */</span></span><br><span class="line">        sigprocmask(SIG_SETMASK,&amp;prev_one,<span class="literal">NULL</span>);  <span class="comment">/* 解除子进程对SIGCHLD的阻塞 */</span></span><br><span class="line">        <span class="comment">/* 这样子sigchld_handler处理程序在我们将其添加到工作队列</span></span><br><span class="line"><span class="comment">            中之前是不会运行的。因为直到addjob()之后，我们才解除对SIGCHLD的阻塞</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line">        <span class="comment">/* 父任务等待前台任务结束 */</span></span><br><span class="line">        <span class="keyword">if</span> (!bg)&#123; <span class="comment">//如果不是后台进程，就等待当前的前台进程</span></span><br><span class="line">            waitfg(pid);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;  <span class="comment">/* 否则就是后台进程，开始在后台工作 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,pid2jid(pid),pid,cmdline);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="builtin-cmd"><a href="#builtin-cmd" class="headerlink" title="builtin_cmd"></a>builtin_cmd</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">builtin_cmd</span><span class="params">(<span class="type">char</span> **argv)</span> <span class="comment">//判断当前命令是否为内置命令</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;quit&quot;</span>)) <span class="comment">//如果是内置命令quit</span></span><br><span class="line">        <span class="built_in">exit</span>(<span class="number">0</span>);               <span class="comment">//就结束当前进程</span></span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;jobs&quot;</span>))&#123;    <span class="comment">/* jobs内置指令 */</span></span><br><span class="line">        listjobs(jobs);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;&amp;&quot;</span>)) <span class="comment">/* 忽略单&amp; */</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  <span class="comment">//然后返回1，因为如果一个命令以&amp;结尾，shell应该在后台运行它，否则在前台运行；</span></span><br><span class="line"> </span><br><span class="line">  <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;      <span class="comment">/* bg内置指令 */</span></span><br><span class="line">    do_bgfg(argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;      <span class="comment">/* fg内置指令 */</span></span><br><span class="line">    do_bgfg(argv);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;     <span class="comment">/* 不是一个内置命令 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="do-bgfg"><a href="#do-bgfg" class="headerlink" title="do_bgfg"></a>do_bgfg</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">do_bgfg</span><span class="params">(<span class="type">char</span> **argv)</span> </span><br><span class="line">&#123;</span><br><span class="line"> </span><br><span class="line">    <span class="type">pid_t</span> pid;                      <span class="comment">/* 进程id */</span></span><br><span class="line">    <span class="type">int</span> jid;                        <span class="comment">/* job的id */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span>;</span></span><br><span class="line">    <span class="keyword">if</span> (argv[<span class="number">1</span>] == <span class="literal">NULL</span>)&#123;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%s command requires PID or %%jobid argument\n&quot;</span>,argv[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//第二个错误是没有传入pid或者jid（为空），就报错并返回</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span> (argv[<span class="number">1</span>][<span class="number">0</span>] == <span class="string">&#x27;%&#x27;</span>)&#123;   <span class="comment">/* 如果输入的是jid（作业） */</span></span><br><span class="line">        <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">1</span>] &lt; <span class="string">&#x27;0&#x27;</span> || argv[<span class="number">1</span>][<span class="number">1</span>] &gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;fg: argument must be a PID or %%jobid\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//第三个错误命令是传入了，但是传入的数据不是不符合pid或jid的规范（输入必须为数字）</span></span><br><span class="line">   <span class="comment">//在这里判断并输出错误信息：fg: argument must be a PID or %%jobid\n</span></span><br><span class="line">        jid = atoi(argv[<span class="number">1</span>]+<span class="number">1</span>);</span><br><span class="line">        job = getjobjid(jobs,jid);<span class="comment">//通过jid找到需要执行的job</span></span><br><span class="line">        <span class="keyword">if</span>(job == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;%%%d: No such job\n&quot;</span>,jid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">   <span class="comment">//第四个错误就是通过jid找到的job==null，因此“NO such job”</span></span><br><span class="line">        pid = job-&gt;pid;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;                              <span class="comment">/* 给的是pid */</span></span><br><span class="line">        <span class="keyword">if</span>(argv[<span class="number">1</span>][<span class="number">0</span>] &lt; <span class="string">&#x27;0&#x27;</span> || argv[<span class="number">1</span>][<span class="number">0</span>] &gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;bg: argument must be a PID or %%jobid\n&quot;</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pid = atoi(argv[<span class="number">1</span>]);</span><br><span class="line">        job = getjobpid(jobs,pid);</span><br><span class="line">        <span class="keyword">if</span>(job == <span class="literal">NULL</span>)&#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;(%d): No such process\n&quot;</span>,pid);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//第五个错误就是通过jid找到的job==null，因此“NO such job”</span></span><br><span class="line">        jid = job-&gt;jid;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;bg&quot;</span>))&#123;          <span class="comment">/* bg内置指令 */</span></span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;[%d] (%d) %s&quot;</span>,jid,pid,job-&gt;cmdline);</span><br><span class="line">            job-&gt;state = BG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">            kill(-pid,SIGCONT);              <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span>(!<span class="built_in">strcmp</span>(argv[<span class="number">0</span>],<span class="string">&quot;fg&quot;</span>))&#123;          <span class="comment">/* fg内置指令 */</span></span><br><span class="line">            job-&gt;state = FG;                <span class="comment">/* 更改状态 */</span></span><br><span class="line">            kill(-pid,SIGCONT);             <span class="comment">/* 传递SIGCONT信号给进程组中的所有进程 */</span></span><br><span class="line">            waitfg(pid);                    <span class="comment">/* 等待前台job完成 */</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="waitfg"><a href="#waitfg" class="headerlink" title="waitfg"></a>waitfg</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">waitfg</span><span class="params">(<span class="type">pid_t</span> pid)</span></span><br><span class="line">&#123;</span><br><span class="line">     <span class="comment">/* 唯一的前台作业结束后，被sigchld_handler回收，deletejob()后，jobs列表中就没有前台作业了，</span></span><br><span class="line"><span class="comment">        循环fpgid(..)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">while</span>(pid==fgpid(jobs))&#123;</span><br><span class="line">        sleep(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sigchld-handler"><a href="#sigchld-handler" class="headerlink" title="sigchld_handler"></a>sigchld_handler</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigchld_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">int</span> olderrno = errno;</span><br><span class="line">    <span class="type">sigset_t</span> mask_all,prev_all;</span><br><span class="line">    <span class="type">pid_t</span> pid;</span><br><span class="line">    <span class="type">int</span> status;</span><br><span class="line"> </span><br><span class="line">    sigfillset(&amp;mask_all);                          <span class="comment">/* 保存当前的信号集合(blocked位向量) */</span></span><br><span class="line">    <span class="keyword">while</span>((pid = waitpid(<span class="number">-1</span>,&amp;status,WNOHANG | WUNTRACED)) &gt; <span class="number">0</span>)&#123;    <span class="comment">/* WNOHANG:非阻塞的 */</span></span><br><span class="line">        <span class="comment">/* 通过调用exit或者一个返回(return)正常终止 */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFEXITED(status))&#123;</span><br><span class="line">            sigprocmask(SIG_BLOCK,&amp;mask_all,&amp;prev_all); <span class="comment">/* 恢复信号集合(blocked位向量) */</span></span><br><span class="line">            deletejob(jobs,pid);     </span><br><span class="line">            sigprocmask(SIG_SETMASK,&amp;prev_all,<span class="literal">NULL</span>);                   </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 子进程是因为一个未被捕获的信号终止的(SIGINT) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSIGNALED(status))&#123;</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) terminated by signal %d\n&quot;</span>,jid,pid,WTERMSIG(status));</span><br><span class="line">            deletejob(jobs,pid);<span class="comment">/* 终止就删除pid的job */</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* 引起返回的子进程当前是停止的(SIGTSTP) */</span></span><br><span class="line">        <span class="keyword">if</span>(WIFSTOPPED(status))&#123;</span><br><span class="line">            <span class="class"><span class="keyword">struct</span> <span class="title">job_t</span> * <span class="title">job</span> =</span> getjobpid(jobs,pid);</span><br><span class="line">            <span class="type">int</span> jid = pid2jid(pid);</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">&quot;Job [%d] (%d) stopped by signal %d\n&quot;</span>,jid,pid,WSTOPSIG(status));</span><br><span class="line">            job-&gt;state = ST;<span class="comment">/* 状态设为停止(ST) */</span></span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    errno = olderrno;</span><br><span class="line"> </span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="sigint-handler"><a href="#sigint-handler" class="headerlink" title="sigint_handler"></a>sigint_handler</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigint_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);<span class="comment">/* 获取前台进程id */</span></span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);     <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>sigtstp_handler</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">sigtstp_handler</span><span class="params">(<span class="type">int</span> sig)</span> </span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">pid_t</span> pid = fgpid(jobs);    <span class="comment">/* 获取前台进程id */</span></span><br><span class="line"> </span><br><span class="line">    <span class="keyword">if</span>(pid &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        kill(-pid,sig);         <span class="comment">/* 转发信号sig给进程组|pid|中的每个进程 */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 不想学辣 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实验报告 </tag>
            
            <tag> 计算机系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>22年5月的博客修改日志</title>
      <link href="/2022.5.change/"/>
      <url>/2022.5.change/</url>
      
        <content type="html"><![CDATA[<div class="timeline blue"><div class='timeline-item headline'><div class='timeline-item-title'><div class='item-circle'></div></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-19</p></div></div><div class='timeline-item-content'><p>背景主题</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-20</p></div></div><div class='timeline-item-content'><p>版权卡片</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-30</p></div></div><div class='timeline-item-content'><p>文章加密</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-31</p></div></div><div class='timeline-item-content'><p>留言板卡片</p></div></div><div class='timeline-item'><div class='timeline-item-title'><div class='item-circle'><p>05-31</p></div></div><div class='timeline-item-content'><p>追番列表</p></div></div></div><hr><h2 id="背景主题"><a href="#背景主题" class="headerlink" title="背景主题"></a>背景主题</h2><p>butterfly这个主题的背景一开始是一个下拉图加上纯白图构成的，我觉得也还行。所以刚开始就用了个助手的图当下拉图就没管了。但是我又发现虽然这个下拉图确实很好看，但是这个纯白的背景看起来有点太素了，如果换成其他颜色的话又感觉和上面的图不太配，所以我就把下拉图给去了。但这样就得改改背景了，于是就找到了大佬<a href="https://www.antmoe.com/">@DreamyTZK</a>的背景设置，于是直接借鉴了一 下。效果就是我博客现在的样子，感觉挺不错的。至于详细的过程，可以看看大佬的博客</p><blockquote><p><a href="https://www.antmoe.com/posts/7198453/">Hexo 博客之 butterfly 主题优雅更换背景</a></p></blockquote><p>具体的css配置及使用可以去看大佬的博客，这里只提几个小问题</p><blockquote><p>文章里的butterfly版本是<mark class="hl-label red">2.3.0</mark> ,而我的版本是<mark class="hl-label blue">4.2.1</mark> ,这就导致了部分的class和id对应不上。比如背景就得换成#body-wrap，边栏的透明得在透明的css里新增.card-widget。</p></blockquote><blockquote><p>还有就是由于在css里新增了class和id，导致黑暗模式下部分模块颜色显示是正常的背景颜色，对应着在css里改改就行了。当然，你要是觉得这样很好看的话，不改也行。</p></blockquote><hr><h2 id="版权卡片"><a href="#版权卡片" class="headerlink" title="版权卡片"></a>版权卡片</h2><p>版权卡片本来是不准备改的，但在找其他东西的时候看见了，也就顺便改了，教程如下</p><blockquote><p>Nesxc的<a href="https://www.nesxc.com/117/">butterfly版权美化教程</a></p></blockquote><p>但是我在改背景的时候把整体背景都弄成透明了，所以版权卡片也透明了，不想透明的话在css里加个not(#post-copyright)就行了。</p><hr><h2 id="文章加密"><a href="#文章加密" class="headerlink" title="文章加密"></a>文章加密</h2><p>本来是准备把整个网站加密的，但感觉每次进来都要输密码好麻烦，所以就用了这个文章加密。但他的输入框在输入的时候好丑，还有就是他那个退出按钮也感觉风格不太搭，回头看看怎么改改。项目地址如下</p><blockquote><p>MikeCoder的<a href="https://github.com/D0n9X1n/hexo-blog-encrypt">hexo-blog-encrypt</a>项目</p></blockquote><hr><h2 id="留言板卡片"><a href="#留言板卡片" class="headerlink" title="留言板卡片"></a>留言板卡片</h2><p>我薇！！！！！！但下面的2233娘,emmmmm,我回头找个时间把这个给弄弄。教程地址：</p><blockquote><p>店长的<a href="https://akilar.top/posts/e2d3c450/">Envelope Style Comments Bar</a></p></blockquote><hr><h2 id="追番列表"><a href="#追番列表" class="headerlink" title="追番列表"></a>追番列表</h2><p>找了很久，就只找到这个插件。但是这个展示会把所有的追番都搞出来，我觉得有点多了，就新注册了个bangumi的号展示最近的。</p><blockquote><p>有个小问题，更新bangumi番剧的时候总要跳”Error Error: connect ETIMEDOUT”的错误，我估摸着是他的展示是按b站来的，但bangumi没有人数这些统计，就导致了这个数据库连接错误的问题。也没啥改的必要，就是看着有点烦。</p></blockquote><blockquote><p>参考教程：HCLonely的<a href="https://hclonely.gitee.io/posts/8422e92e/">Hexo哔哩哔哩番剧页面插件</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于博客的一些事情</title>
      <link href="/1/"/>
      <url>/1/</url>
      
        <content type="html"><![CDATA[<h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>  其实一开始我是不准备用博客模板的，因为我这个人不是很喜欢用自己不了解的东西。所以我花了大 半个月去从0开始写了一个博客。顺便还练了练自己上个学期有点摆烂的Java和这个学期学的数据库啥的。在写的过程中遇到了一堆莫名奇妙的bug和折磨的期中考试。但我还是一直在做。本来吧，基本上都差不多已经写完了，但是我忽略了移动端适应的问题。结果在网页上面看着好好的界面，一缩小就直接gg。然后我自然要去搞这个移动端适应，对吧。但在折磨了大半个月之后，我发现我还是放弃的好,不然，我就该没时间复习期末了。</p><h1 id="经过"><a href="#经过" class="headerlink" title="经过"></a>经过</h1><p>  之所以会用hexo，主要原因是懒，所以干脆就直接摆烂了。然后在熟悉的时候，果然出现了一堆莫名奇妙的问题，但，还好它们都被顺利的解决了。现在这个博客也算是可以正常使用了（大雾）。但也就是能用而已，像什么nav的索引设置啊，底部footer的样式类型啊，评论留言啊什么的可以说是根本没有。但，它可以用了，所以，就这样吧，先用着再说，然后慢慢改吧。我估摸着，要把这个博客改的差不多符合我预期的话，得到期末了吧（虽然现在好像就是期末了）。那就先这样吧，快快乐乐摆大烂！</p>]]></content>
      
      
      <categories>
          
          <category> 博客相关 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 随笔 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
